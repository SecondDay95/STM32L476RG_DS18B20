
15_DS18B20_1_WIRE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003578  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003700  08003700  00004700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003748  08003748  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  08003748  08003748  00004748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003750  08003750  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003750  08003750  00004750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003754  08003754  00004754  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003758  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f4  2000000c  08003764  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000100  08003764  00005100  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010042  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002280  00000000  00000000  0001507e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f48  00000000  00000000  00017300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bde  00000000  00000000  00018248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026e91  00000000  00000000  00018e26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012615  00000000  00000000  0003fcb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f2145  00000000  00000000  000522cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00144411  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f80  00000000  00000000  00144454  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  001483d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080036e8 	.word	0x080036e8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080036e8 	.word	0x080036e8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b088      	sub	sp, #32
 80004bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004be:	f107 030c 	add.w	r3, r7, #12
 80004c2:	2200      	movs	r2, #0
 80004c4:	601a      	str	r2, [r3, #0]
 80004c6:	605a      	str	r2, [r3, #4]
 80004c8:	609a      	str	r2, [r3, #8]
 80004ca:	60da      	str	r2, [r3, #12]
 80004cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004ce:	4b17      	ldr	r3, [pc, #92]	@ (800052c <MX_GPIO_Init+0x74>)
 80004d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004d2:	4a16      	ldr	r2, [pc, #88]	@ (800052c <MX_GPIO_Init+0x74>)
 80004d4:	f043 0304 	orr.w	r3, r3, #4
 80004d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80004da:	4b14      	ldr	r3, [pc, #80]	@ (800052c <MX_GPIO_Init+0x74>)
 80004dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004de:	f003 0304 	and.w	r3, r3, #4
 80004e2:	60bb      	str	r3, [r7, #8]
 80004e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004e6:	4b11      	ldr	r3, [pc, #68]	@ (800052c <MX_GPIO_Init+0x74>)
 80004e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004ea:	4a10      	ldr	r2, [pc, #64]	@ (800052c <MX_GPIO_Init+0x74>)
 80004ec:	f043 0301 	orr.w	r3, r3, #1
 80004f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80004f2:	4b0e      	ldr	r3, [pc, #56]	@ (800052c <MX_GPIO_Init+0x74>)
 80004f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004f6:	f003 0301 	and.w	r3, r3, #1
 80004fa:	607b      	str	r3, [r7, #4]
 80004fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_SET);
 80004fe:	2201      	movs	r2, #1
 8000500:	2110      	movs	r1, #16
 8000502:	480b      	ldr	r0, [pc, #44]	@ (8000530 <MX_GPIO_Init+0x78>)
 8000504:	f000 fe5c 	bl	80011c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DS_Pin;
 8000508:	2310      	movs	r3, #16
 800050a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800050c:	2311      	movs	r3, #17
 800050e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000510:	2300      	movs	r3, #0
 8000512:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000514:	2300      	movs	r3, #0
 8000516:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DS_GPIO_Port, &GPIO_InitStruct);
 8000518:	f107 030c 	add.w	r3, r7, #12
 800051c:	4619      	mov	r1, r3
 800051e:	4804      	ldr	r0, [pc, #16]	@ (8000530 <MX_GPIO_Init+0x78>)
 8000520:	f000 fc8c 	bl	8000e3c <HAL_GPIO_Init>

}
 8000524:	bf00      	nop
 8000526:	3720      	adds	r7, #32
 8000528:	46bd      	mov	sp, r7
 800052a:	bd80      	pop	{r7, pc}
 800052c:	40021000 	.word	0x40021000
 8000530:	48000800 	.word	0x48000800

08000534 <delay_us>:
  HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);

  return 1;
}

void delay_us(uint32_t us) {
 8000534:	b480      	push	{r7}
 8000536:	b083      	sub	sp, #12
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]

	__HAL_TIM_SET_COUNTER(&htim6, 0);
 800053c:	4b08      	ldr	r3, [pc, #32]	@ (8000560 <delay_us+0x2c>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	2200      	movs	r2, #0
 8000542:	625a      	str	r2, [r3, #36]	@ 0x24
	while(__HAL_TIM_GET_COUNTER(&htim6) < us)
 8000544:	bf00      	nop
 8000546:	4b06      	ldr	r3, [pc, #24]	@ (8000560 <delay_us+0x2c>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800054c:	687a      	ldr	r2, [r7, #4]
 800054e:	429a      	cmp	r2, r3
 8000550:	d8f9      	bhi.n	8000546 <delay_us+0x12>
	{

	}

}
 8000552:	bf00      	nop
 8000554:	bf00      	nop
 8000556:	370c      	adds	r7, #12
 8000558:	46bd      	mov	sp, r7
 800055a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055e:	4770      	bx	lr
 8000560:	20000028 	.word	0x20000028

08000564 <wire_reset>:

HAL_StatusTypeDef wire_reset(void) {
 8000564:	b580      	push	{r7, lr}
 8000566:	b082      	sub	sp, #8
 8000568:	af00      	add	r7, sp, #0

	int rc;

	HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_RESET);
 800056a:	2200      	movs	r2, #0
 800056c:	2110      	movs	r1, #16
 800056e:	4811      	ldr	r0, [pc, #68]	@ (80005b4 <wire_reset+0x50>)
 8000570:	f000 fe26 	bl	80011c0 <HAL_GPIO_WritePin>
	delay_us(480);
 8000574:	f44f 70f0 	mov.w	r0, #480	@ 0x1e0
 8000578:	f7ff ffdc 	bl	8000534 <delay_us>
	HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_SET);
 800057c:	2201      	movs	r2, #1
 800057e:	2110      	movs	r1, #16
 8000580:	480c      	ldr	r0, [pc, #48]	@ (80005b4 <wire_reset+0x50>)
 8000582:	f000 fe1d 	bl	80011c0 <HAL_GPIO_WritePin>
	delay_us(70);
 8000586:	2046      	movs	r0, #70	@ 0x46
 8000588:	f7ff ffd4 	bl	8000534 <delay_us>
	rc = HAL_GPIO_ReadPin(DS_GPIO_Port, DS_Pin);
 800058c:	2110      	movs	r1, #16
 800058e:	4809      	ldr	r0, [pc, #36]	@ (80005b4 <wire_reset+0x50>)
 8000590:	f000 fdfe 	bl	8001190 <HAL_GPIO_ReadPin>
 8000594:	4603      	mov	r3, r0
 8000596:	607b      	str	r3, [r7, #4]
	delay_us(410);
 8000598:	f44f 70cd 	mov.w	r0, #410	@ 0x19a
 800059c:	f7ff ffca 	bl	8000534 <delay_us>

	if(rc == 0)
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d101      	bne.n	80005aa <wire_reset+0x46>
		return HAL_OK;
 80005a6:	2300      	movs	r3, #0
 80005a8:	e000      	b.n	80005ac <wire_reset+0x48>
	else
		return HAL_ERROR;
 80005aa:	2301      	movs	r3, #1

}
 80005ac:	4618      	mov	r0, r3
 80005ae:	3708      	adds	r7, #8
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	48000800 	.word	0x48000800

080005b8 <write_bit>:

void write_bit(int value) {
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]

	if(value) {
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d010      	beq.n	80005e8 <write_bit+0x30>

		HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_RESET);
 80005c6:	2200      	movs	r2, #0
 80005c8:	2110      	movs	r1, #16
 80005ca:	4811      	ldr	r0, [pc, #68]	@ (8000610 <write_bit+0x58>)
 80005cc:	f000 fdf8 	bl	80011c0 <HAL_GPIO_WritePin>
		delay_us(6);
 80005d0:	2006      	movs	r0, #6
 80005d2:	f7ff ffaf 	bl	8000534 <delay_us>
		HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_SET);
 80005d6:	2201      	movs	r2, #1
 80005d8:	2110      	movs	r1, #16
 80005da:	480d      	ldr	r0, [pc, #52]	@ (8000610 <write_bit+0x58>)
 80005dc:	f000 fdf0 	bl	80011c0 <HAL_GPIO_WritePin>
		delay_us(64);
 80005e0:	2040      	movs	r0, #64	@ 0x40
 80005e2:	f7ff ffa7 	bl	8000534 <delay_us>
		HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_SET);
		delay_us(10);

	}

}
 80005e6:	e00f      	b.n	8000608 <write_bit+0x50>
		HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_RESET);
 80005e8:	2200      	movs	r2, #0
 80005ea:	2110      	movs	r1, #16
 80005ec:	4808      	ldr	r0, [pc, #32]	@ (8000610 <write_bit+0x58>)
 80005ee:	f000 fde7 	bl	80011c0 <HAL_GPIO_WritePin>
		delay_us(60);
 80005f2:	203c      	movs	r0, #60	@ 0x3c
 80005f4:	f7ff ff9e 	bl	8000534 <delay_us>
		HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_SET);
 80005f8:	2201      	movs	r2, #1
 80005fa:	2110      	movs	r1, #16
 80005fc:	4804      	ldr	r0, [pc, #16]	@ (8000610 <write_bit+0x58>)
 80005fe:	f000 fddf 	bl	80011c0 <HAL_GPIO_WritePin>
		delay_us(10);
 8000602:	200a      	movs	r0, #10
 8000604:	f7ff ff96 	bl	8000534 <delay_us>
}
 8000608:	bf00      	nop
 800060a:	3708      	adds	r7, #8
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	48000800 	.word	0x48000800

08000614 <read_bit>:

int read_bit(void) {
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0

	int rc;

	HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_RESET);
 800061a:	2200      	movs	r2, #0
 800061c:	2110      	movs	r1, #16
 800061e:	480e      	ldr	r0, [pc, #56]	@ (8000658 <read_bit+0x44>)
 8000620:	f000 fdce 	bl	80011c0 <HAL_GPIO_WritePin>
	delay_us(6);
 8000624:	2006      	movs	r0, #6
 8000626:	f7ff ff85 	bl	8000534 <delay_us>
	HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_SET);
 800062a:	2201      	movs	r2, #1
 800062c:	2110      	movs	r1, #16
 800062e:	480a      	ldr	r0, [pc, #40]	@ (8000658 <read_bit+0x44>)
 8000630:	f000 fdc6 	bl	80011c0 <HAL_GPIO_WritePin>
	delay_us(9);
 8000634:	2009      	movs	r0, #9
 8000636:	f7ff ff7d 	bl	8000534 <delay_us>
	rc = HAL_GPIO_ReadPin(DS_GPIO_Port, DS_Pin);
 800063a:	2110      	movs	r1, #16
 800063c:	4806      	ldr	r0, [pc, #24]	@ (8000658 <read_bit+0x44>)
 800063e:	f000 fda7 	bl	8001190 <HAL_GPIO_ReadPin>
 8000642:	4603      	mov	r3, r0
 8000644:	607b      	str	r3, [r7, #4]
	delay_us(55);
 8000646:	2037      	movs	r0, #55	@ 0x37
 8000648:	f7ff ff74 	bl	8000534 <delay_us>
	return rc;
 800064c:	687b      	ldr	r3, [r7, #4]

}
 800064e:	4618      	mov	r0, r3
 8000650:	3708      	adds	r7, #8
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	48000800 	.word	0x48000800

0800065c <wire_write>:

void wire_write(uint8_t byte) {
 800065c:	b580      	push	{r7, lr}
 800065e:	b084      	sub	sp, #16
 8000660:	af00      	add	r7, sp, #0
 8000662:	4603      	mov	r3, r0
 8000664:	71fb      	strb	r3, [r7, #7]

	for(int i = 0; i < 8; i++) {
 8000666:	2300      	movs	r3, #0
 8000668:	60fb      	str	r3, [r7, #12]
 800066a:	e00b      	b.n	8000684 <wire_write+0x28>

		write_bit(byte & 0x01);
 800066c:	79fb      	ldrb	r3, [r7, #7]
 800066e:	f003 0301 	and.w	r3, r3, #1
 8000672:	4618      	mov	r0, r3
 8000674:	f7ff ffa0 	bl	80005b8 <write_bit>
		byte >>= 1;
 8000678:	79fb      	ldrb	r3, [r7, #7]
 800067a:	085b      	lsrs	r3, r3, #1
 800067c:	71fb      	strb	r3, [r7, #7]
	for(int i = 0; i < 8; i++) {
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	3301      	adds	r3, #1
 8000682:	60fb      	str	r3, [r7, #12]
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	2b07      	cmp	r3, #7
 8000688:	ddf0      	ble.n	800066c <wire_write+0x10>

	}

}
 800068a:	bf00      	nop
 800068c:	bf00      	nop
 800068e:	3710      	adds	r7, #16
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}

08000694 <wire_read>:

uint8_t wire_read(void) {
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0

	uint8_t value = 0;
 800069a:	2300      	movs	r3, #0
 800069c:	71fb      	strb	r3, [r7, #7]
	for(int i = 0; i < 8; i++) {
 800069e:	2300      	movs	r3, #0
 80006a0:	603b      	str	r3, [r7, #0]
 80006a2:	e00e      	b.n	80006c2 <wire_read+0x2e>

		value >>= 1;
 80006a4:	79fb      	ldrb	r3, [r7, #7]
 80006a6:	085b      	lsrs	r3, r3, #1
 80006a8:	71fb      	strb	r3, [r7, #7]
		if(read_bit())
 80006aa:	f7ff ffb3 	bl	8000614 <read_bit>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d003      	beq.n	80006bc <wire_read+0x28>
			value |= 0x80;
 80006b4:	79fb      	ldrb	r3, [r7, #7]
 80006b6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80006ba:	71fb      	strb	r3, [r7, #7]
	for(int i = 0; i < 8; i++) {
 80006bc:	683b      	ldr	r3, [r7, #0]
 80006be:	3301      	adds	r3, #1
 80006c0:	603b      	str	r3, [r7, #0]
 80006c2:	683b      	ldr	r3, [r7, #0]
 80006c4:	2b07      	cmp	r3, #7
 80006c6:	dded      	ble.n	80006a4 <wire_read+0x10>

	}

	return value;
 80006c8:	79fb      	ldrb	r3, [r7, #7]

}
 80006ca:	4618      	mov	r0, r3
 80006cc:	3708      	adds	r7, #8
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}

080006d2 <byte_crc>:

uint8_t byte_crc(uint8_t crc, uint8_t byte)
{
 80006d2:	b480      	push	{r7}
 80006d4:	b085      	sub	sp, #20
 80006d6:	af00      	add	r7, sp, #0
 80006d8:	4603      	mov	r3, r0
 80006da:	460a      	mov	r2, r1
 80006dc:	71fb      	strb	r3, [r7, #7]
 80006de:	4613      	mov	r3, r2
 80006e0:	71bb      	strb	r3, [r7, #6]
  int i;
  for (i = 0; i < 8; i++) {
 80006e2:	2300      	movs	r3, #0
 80006e4:	60fb      	str	r3, [r7, #12]
 80006e6:	e016      	b.n	8000716 <byte_crc+0x44>
    uint8_t b = crc ^ byte;
 80006e8:	79fa      	ldrb	r2, [r7, #7]
 80006ea:	79bb      	ldrb	r3, [r7, #6]
 80006ec:	4053      	eors	r3, r2
 80006ee:	72fb      	strb	r3, [r7, #11]
    crc >>= 1;
 80006f0:	79fb      	ldrb	r3, [r7, #7]
 80006f2:	085b      	lsrs	r3, r3, #1
 80006f4:	71fb      	strb	r3, [r7, #7]
    if (b & 0x01)
 80006f6:	7afb      	ldrb	r3, [r7, #11]
 80006f8:	f003 0301 	and.w	r3, r3, #1
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d004      	beq.n	800070a <byte_crc+0x38>
      crc ^= 0x8c;
 8000700:	79fb      	ldrb	r3, [r7, #7]
 8000702:	f083 0373 	eor.w	r3, r3, #115	@ 0x73
 8000706:	43db      	mvns	r3, r3
 8000708:	71fb      	strb	r3, [r7, #7]
    byte >>= 1;
 800070a:	79bb      	ldrb	r3, [r7, #6]
 800070c:	085b      	lsrs	r3, r3, #1
 800070e:	71bb      	strb	r3, [r7, #6]
  for (i = 0; i < 8; i++) {
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	3301      	adds	r3, #1
 8000714:	60fb      	str	r3, [r7, #12]
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	2b07      	cmp	r3, #7
 800071a:	dde5      	ble.n	80006e8 <byte_crc+0x16>
  }
  return crc;
 800071c:	79fb      	ldrb	r3, [r7, #7]
}
 800071e:	4618      	mov	r0, r3
 8000720:	3714      	adds	r7, #20
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr

0800072a <wire_crc>:

uint8_t wire_crc(const uint8_t* data, int len)
{
 800072a:	b580      	push	{r7, lr}
 800072c:	b084      	sub	sp, #16
 800072e:	af00      	add	r7, sp, #0
 8000730:	6078      	str	r0, [r7, #4]
 8000732:	6039      	str	r1, [r7, #0]
  int i;
    uint8_t crc = 0;
 8000734:	2300      	movs	r3, #0
 8000736:	72fb      	strb	r3, [r7, #11]

    for (i = 0; i < len; i++)
 8000738:	2300      	movs	r3, #0
 800073a:	60fb      	str	r3, [r7, #12]
 800073c:	e00d      	b.n	800075a <wire_crc+0x30>
      crc = byte_crc(crc, data[i]);
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	687a      	ldr	r2, [r7, #4]
 8000742:	4413      	add	r3, r2
 8000744:	781a      	ldrb	r2, [r3, #0]
 8000746:	7afb      	ldrb	r3, [r7, #11]
 8000748:	4611      	mov	r1, r2
 800074a:	4618      	mov	r0, r3
 800074c:	f7ff ffc1 	bl	80006d2 <byte_crc>
 8000750:	4603      	mov	r3, r0
 8000752:	72fb      	strb	r3, [r7, #11]
    for (i = 0; i < len; i++)
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	3301      	adds	r3, #1
 8000758:	60fb      	str	r3, [r7, #12]
 800075a:	68fa      	ldr	r2, [r7, #12]
 800075c:	683b      	ldr	r3, [r7, #0]
 800075e:	429a      	cmp	r2, r3
 8000760:	dbed      	blt.n	800073e <wire_crc+0x14>

    return crc;
 8000762:	7afb      	ldrb	r3, [r7, #11]
}
 8000764:	4618      	mov	r0, r3
 8000766:	3710      	adds	r7, #16
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}

0800076c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b084      	sub	sp, #16
 8000770:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000772:	f000 fa08 	bl	8000b86 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000776:	f000 f82d 	bl	80007d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800077a:	f7ff fe9d 	bl	80004b8 <MX_GPIO_Init>
  MX_TIM6_Init();
 800077e:	f000 f8f7 	bl	8000970 <MX_TIM6_Init>
  MX_USART2_UART_Init();
 8000782:	f000 f94b 	bl	8000a1c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim6);
 8000786:	4812      	ldr	r0, [pc, #72]	@ (80007d0 <main+0x64>)
 8000788:	f002 f8ca 	bl	8002920 <HAL_TIM_Base_Start>

  HAL_StatusTypeDef rc = wire_reset();
 800078c:	f7ff feea 	bl	8000564 <wire_reset>
 8000790:	4603      	mov	r3, r0
 8000792:	72fb      	strb	r3, [r7, #11]

  wire_write(0x33);
 8000794:	2033      	movs	r0, #51	@ 0x33
 8000796:	f7ff ff61 	bl	800065c <wire_write>

  uint8_t rom_code[8];
  for(int i = 0; i < 8; i++)
 800079a:	2300      	movs	r3, #0
 800079c:	60fb      	str	r3, [r7, #12]
 800079e:	e00b      	b.n	80007b8 <main+0x4c>
	  rom_code[i] = wire_read();
 80007a0:	f7ff ff78 	bl	8000694 <wire_read>
 80007a4:	4603      	mov	r3, r0
 80007a6:	4619      	mov	r1, r3
 80007a8:	463a      	mov	r2, r7
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	4413      	add	r3, r2
 80007ae:	460a      	mov	r2, r1
 80007b0:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i < 8; i++)
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	3301      	adds	r3, #1
 80007b6:	60fb      	str	r3, [r7, #12]
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	2b07      	cmp	r3, #7
 80007bc:	ddf0      	ble.n	80007a0 <main+0x34>

  uint8_t crc = wire_crc(rom_code, 7);
 80007be:	463b      	mov	r3, r7
 80007c0:	2107      	movs	r1, #7
 80007c2:	4618      	mov	r0, r3
 80007c4:	f7ff ffb1 	bl	800072a <wire_crc>
 80007c8:	4603      	mov	r3, r0
 80007ca:	72bb      	strb	r3, [r7, #10]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007cc:	bf00      	nop
 80007ce:	e7fd      	b.n	80007cc <main+0x60>
 80007d0:	20000028 	.word	0x20000028

080007d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b096      	sub	sp, #88	@ 0x58
 80007d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007da:	f107 0314 	add.w	r3, r7, #20
 80007de:	2244      	movs	r2, #68	@ 0x44
 80007e0:	2100      	movs	r1, #0
 80007e2:	4618      	mov	r0, r3
 80007e4:	f002 ff53 	bl	800368e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007e8:	463b      	mov	r3, r7
 80007ea:	2200      	movs	r2, #0
 80007ec:	601a      	str	r2, [r3, #0]
 80007ee:	605a      	str	r2, [r3, #4]
 80007f0:	609a      	str	r2, [r3, #8]
 80007f2:	60da      	str	r2, [r3, #12]
 80007f4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80007f6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80007fa:	f000 fd17 	bl	800122c <HAL_PWREx_ControlVoltageScaling>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000804:	f000 f848 	bl	8000898 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000808:	f000 fcf2 	bl	80011f0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800080c:	4b21      	ldr	r3, [pc, #132]	@ (8000894 <SystemClock_Config+0xc0>)
 800080e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000812:	4a20      	ldr	r2, [pc, #128]	@ (8000894 <SystemClock_Config+0xc0>)
 8000814:	f023 0318 	bic.w	r3, r3, #24
 8000818:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800081c:	2314      	movs	r3, #20
 800081e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000820:	2301      	movs	r3, #1
 8000822:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000824:	2301      	movs	r3, #1
 8000826:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000828:	2300      	movs	r3, #0
 800082a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800082c:	2360      	movs	r3, #96	@ 0x60
 800082e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000830:	2302      	movs	r3, #2
 8000832:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000834:	2301      	movs	r3, #1
 8000836:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000838:	2301      	movs	r3, #1
 800083a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 800083c:	2328      	movs	r3, #40	@ 0x28
 800083e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000840:	2307      	movs	r3, #7
 8000842:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000844:	2302      	movs	r3, #2
 8000846:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000848:	2302      	movs	r3, #2
 800084a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800084c:	f107 0314 	add.w	r3, r7, #20
 8000850:	4618      	mov	r0, r3
 8000852:	f000 fd41 	bl	80012d8 <HAL_RCC_OscConfig>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800085c:	f000 f81c 	bl	8000898 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000860:	230f      	movs	r3, #15
 8000862:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000864:	2303      	movs	r3, #3
 8000866:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000868:	2300      	movs	r3, #0
 800086a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800086c:	2300      	movs	r3, #0
 800086e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000870:	2300      	movs	r3, #0
 8000872:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000874:	463b      	mov	r3, r7
 8000876:	2104      	movs	r1, #4
 8000878:	4618      	mov	r0, r3
 800087a:	f001 f909 	bl	8001a90 <HAL_RCC_ClockConfig>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000884:	f000 f808 	bl	8000898 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000888:	f001 fe10 	bl	80024ac <HAL_RCCEx_EnableMSIPLLMode>
}
 800088c:	bf00      	nop
 800088e:	3758      	adds	r7, #88	@ 0x58
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	40021000 	.word	0x40021000

08000898 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800089c:	b672      	cpsid	i
}
 800089e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008a0:	bf00      	nop
 80008a2:	e7fd      	b.n	80008a0 <Error_Handler+0x8>

080008a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b083      	sub	sp, #12
 80008a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008aa:	4b0f      	ldr	r3, [pc, #60]	@ (80008e8 <HAL_MspInit+0x44>)
 80008ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008ae:	4a0e      	ldr	r2, [pc, #56]	@ (80008e8 <HAL_MspInit+0x44>)
 80008b0:	f043 0301 	orr.w	r3, r3, #1
 80008b4:	6613      	str	r3, [r2, #96]	@ 0x60
 80008b6:	4b0c      	ldr	r3, [pc, #48]	@ (80008e8 <HAL_MspInit+0x44>)
 80008b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008ba:	f003 0301 	and.w	r3, r3, #1
 80008be:	607b      	str	r3, [r7, #4]
 80008c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008c2:	4b09      	ldr	r3, [pc, #36]	@ (80008e8 <HAL_MspInit+0x44>)
 80008c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008c6:	4a08      	ldr	r2, [pc, #32]	@ (80008e8 <HAL_MspInit+0x44>)
 80008c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80008ce:	4b06      	ldr	r3, [pc, #24]	@ (80008e8 <HAL_MspInit+0x44>)
 80008d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008d6:	603b      	str	r3, [r7, #0]
 80008d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008da:	bf00      	nop
 80008dc:	370c      	adds	r7, #12
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop
 80008e8:	40021000 	.word	0x40021000

080008ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008f0:	bf00      	nop
 80008f2:	e7fd      	b.n	80008f0 <NMI_Handler+0x4>

080008f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008f8:	bf00      	nop
 80008fa:	e7fd      	b.n	80008f8 <HardFault_Handler+0x4>

080008fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000900:	bf00      	nop
 8000902:	e7fd      	b.n	8000900 <MemManage_Handler+0x4>

08000904 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000908:	bf00      	nop
 800090a:	e7fd      	b.n	8000908 <BusFault_Handler+0x4>

0800090c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000910:	bf00      	nop
 8000912:	e7fd      	b.n	8000910 <UsageFault_Handler+0x4>

08000914 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000918:	bf00      	nop
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr

08000922 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000922:	b480      	push	{r7}
 8000924:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000926:	bf00      	nop
 8000928:	46bd      	mov	sp, r7
 800092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092e:	4770      	bx	lr

08000930 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000934:	bf00      	nop
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr

0800093e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800093e:	b580      	push	{r7, lr}
 8000940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000942:	f000 f975 	bl	8000c30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000946:	bf00      	nop
 8000948:	bd80      	pop	{r7, pc}
	...

0800094c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000950:	4b06      	ldr	r3, [pc, #24]	@ (800096c <SystemInit+0x20>)
 8000952:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000956:	4a05      	ldr	r2, [pc, #20]	@ (800096c <SystemInit+0x20>)
 8000958:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800095c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000960:	bf00      	nop
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	e000ed00 	.word	0xe000ed00

08000970 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b084      	sub	sp, #16
 8000974:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000976:	1d3b      	adds	r3, r7, #4
 8000978:	2200      	movs	r2, #0
 800097a:	601a      	str	r2, [r3, #0]
 800097c:	605a      	str	r2, [r3, #4]
 800097e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000980:	4b14      	ldr	r3, [pc, #80]	@ (80009d4 <MX_TIM6_Init+0x64>)
 8000982:	4a15      	ldr	r2, [pc, #84]	@ (80009d8 <MX_TIM6_Init+0x68>)
 8000984:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 79;
 8000986:	4b13      	ldr	r3, [pc, #76]	@ (80009d4 <MX_TIM6_Init+0x64>)
 8000988:	224f      	movs	r2, #79	@ 0x4f
 800098a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800098c:	4b11      	ldr	r3, [pc, #68]	@ (80009d4 <MX_TIM6_Init+0x64>)
 800098e:	2200      	movs	r2, #0
 8000990:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000992:	4b10      	ldr	r3, [pc, #64]	@ (80009d4 <MX_TIM6_Init+0x64>)
 8000994:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000998:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800099a:	4b0e      	ldr	r3, [pc, #56]	@ (80009d4 <MX_TIM6_Init+0x64>)
 800099c:	2200      	movs	r2, #0
 800099e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80009a0:	480c      	ldr	r0, [pc, #48]	@ (80009d4 <MX_TIM6_Init+0x64>)
 80009a2:	f001 ff65 	bl	8002870 <HAL_TIM_Base_Init>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80009ac:	f7ff ff74 	bl	8000898 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009b0:	2300      	movs	r3, #0
 80009b2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009b4:	2300      	movs	r3, #0
 80009b6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80009b8:	1d3b      	adds	r3, r7, #4
 80009ba:	4619      	mov	r1, r3
 80009bc:	4805      	ldr	r0, [pc, #20]	@ (80009d4 <MX_TIM6_Init+0x64>)
 80009be:	f002 f8bd 	bl	8002b3c <HAL_TIMEx_MasterConfigSynchronization>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80009c8:	f7ff ff66 	bl	8000898 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80009cc:	bf00      	nop
 80009ce:	3710      	adds	r7, #16
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	20000028 	.word	0x20000028
 80009d8:	40001000 	.word	0x40001000

080009dc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80009dc:	b480      	push	{r7}
 80009de:	b085      	sub	sp, #20
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4a0a      	ldr	r2, [pc, #40]	@ (8000a14 <HAL_TIM_Base_MspInit+0x38>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d10b      	bne.n	8000a06 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80009ee:	4b0a      	ldr	r3, [pc, #40]	@ (8000a18 <HAL_TIM_Base_MspInit+0x3c>)
 80009f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009f2:	4a09      	ldr	r2, [pc, #36]	@ (8000a18 <HAL_TIM_Base_MspInit+0x3c>)
 80009f4:	f043 0310 	orr.w	r3, r3, #16
 80009f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80009fa:	4b07      	ldr	r3, [pc, #28]	@ (8000a18 <HAL_TIM_Base_MspInit+0x3c>)
 80009fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009fe:	f003 0310 	and.w	r3, r3, #16
 8000a02:	60fb      	str	r3, [r7, #12]
 8000a04:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8000a06:	bf00      	nop
 8000a08:	3714      	adds	r7, #20
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	40001000 	.word	0x40001000
 8000a18:	40021000 	.word	0x40021000

08000a1c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a20:	4b14      	ldr	r3, [pc, #80]	@ (8000a74 <MX_USART2_UART_Init+0x58>)
 8000a22:	4a15      	ldr	r2, [pc, #84]	@ (8000a78 <MX_USART2_UART_Init+0x5c>)
 8000a24:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a26:	4b13      	ldr	r3, [pc, #76]	@ (8000a74 <MX_USART2_UART_Init+0x58>)
 8000a28:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a2c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a2e:	4b11      	ldr	r3, [pc, #68]	@ (8000a74 <MX_USART2_UART_Init+0x58>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a34:	4b0f      	ldr	r3, [pc, #60]	@ (8000a74 <MX_USART2_UART_Init+0x58>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a3a:	4b0e      	ldr	r3, [pc, #56]	@ (8000a74 <MX_USART2_UART_Init+0x58>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a40:	4b0c      	ldr	r3, [pc, #48]	@ (8000a74 <MX_USART2_UART_Init+0x58>)
 8000a42:	220c      	movs	r2, #12
 8000a44:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a46:	4b0b      	ldr	r3, [pc, #44]	@ (8000a74 <MX_USART2_UART_Init+0x58>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a4c:	4b09      	ldr	r3, [pc, #36]	@ (8000a74 <MX_USART2_UART_Init+0x58>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a52:	4b08      	ldr	r3, [pc, #32]	@ (8000a74 <MX_USART2_UART_Init+0x58>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a58:	4b06      	ldr	r3, [pc, #24]	@ (8000a74 <MX_USART2_UART_Init+0x58>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a5e:	4805      	ldr	r0, [pc, #20]	@ (8000a74 <MX_USART2_UART_Init+0x58>)
 8000a60:	f002 f8f4 	bl	8002c4c <HAL_UART_Init>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000a6a:	f7ff ff15 	bl	8000898 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a6e:	bf00      	nop
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	20000074 	.word	0x20000074
 8000a78:	40004400 	.word	0x40004400

08000a7c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b0ac      	sub	sp, #176	@ 0xb0
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a84:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	605a      	str	r2, [r3, #4]
 8000a8e:	609a      	str	r2, [r3, #8]
 8000a90:	60da      	str	r2, [r3, #12]
 8000a92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a94:	f107 0314 	add.w	r3, r7, #20
 8000a98:	2288      	movs	r2, #136	@ 0x88
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f002 fdf6 	bl	800368e <memset>
  if(uartHandle->Instance==USART2)
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	4a21      	ldr	r2, [pc, #132]	@ (8000b2c <HAL_UART_MspInit+0xb0>)
 8000aa8:	4293      	cmp	r3, r2
 8000aaa:	d13b      	bne.n	8000b24 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000aac:	2302      	movs	r3, #2
 8000aae:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ab4:	f107 0314 	add.w	r3, r7, #20
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f001 fa0d 	bl	8001ed8 <HAL_RCCEx_PeriphCLKConfig>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ac4:	f7ff fee8 	bl	8000898 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ac8:	4b19      	ldr	r3, [pc, #100]	@ (8000b30 <HAL_UART_MspInit+0xb4>)
 8000aca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000acc:	4a18      	ldr	r2, [pc, #96]	@ (8000b30 <HAL_UART_MspInit+0xb4>)
 8000ace:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ad2:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ad4:	4b16      	ldr	r3, [pc, #88]	@ (8000b30 <HAL_UART_MspInit+0xb4>)
 8000ad6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ad8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000adc:	613b      	str	r3, [r7, #16]
 8000ade:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae0:	4b13      	ldr	r3, [pc, #76]	@ (8000b30 <HAL_UART_MspInit+0xb4>)
 8000ae2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ae4:	4a12      	ldr	r2, [pc, #72]	@ (8000b30 <HAL_UART_MspInit+0xb4>)
 8000ae6:	f043 0301 	orr.w	r3, r3, #1
 8000aea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000aec:	4b10      	ldr	r3, [pc, #64]	@ (8000b30 <HAL_UART_MspInit+0xb4>)
 8000aee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000af0:	f003 0301 	and.w	r3, r3, #1
 8000af4:	60fb      	str	r3, [r7, #12]
 8000af6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000af8:	230c      	movs	r3, #12
 8000afa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afe:	2302      	movs	r3, #2
 8000b00:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b04:	2300      	movs	r3, #0
 8000b06:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b0a:	2303      	movs	r3, #3
 8000b0c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b10:	2307      	movs	r3, #7
 8000b12:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b16:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b20:	f000 f98c 	bl	8000e3c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000b24:	bf00      	nop
 8000b26:	37b0      	adds	r7, #176	@ 0xb0
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	40004400 	.word	0x40004400
 8000b30:	40021000 	.word	0x40021000

08000b34 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b34:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b6c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b38:	f7ff ff08 	bl	800094c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b3c:	480c      	ldr	r0, [pc, #48]	@ (8000b70 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b3e:	490d      	ldr	r1, [pc, #52]	@ (8000b74 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b40:	4a0d      	ldr	r2, [pc, #52]	@ (8000b78 <LoopForever+0xe>)
  movs r3, #0
 8000b42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b44:	e002      	b.n	8000b4c <LoopCopyDataInit>

08000b46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b4a:	3304      	adds	r3, #4

08000b4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b50:	d3f9      	bcc.n	8000b46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b52:	4a0a      	ldr	r2, [pc, #40]	@ (8000b7c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b54:	4c0a      	ldr	r4, [pc, #40]	@ (8000b80 <LoopForever+0x16>)
  movs r3, #0
 8000b56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b58:	e001      	b.n	8000b5e <LoopFillZerobss>

08000b5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b5c:	3204      	adds	r2, #4

08000b5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b60:	d3fb      	bcc.n	8000b5a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b62:	f002 fd9d 	bl	80036a0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b66:	f7ff fe01 	bl	800076c <main>

08000b6a <LoopForever>:

LoopForever:
    b LoopForever
 8000b6a:	e7fe      	b.n	8000b6a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b6c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000b70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b74:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b78:	08003758 	.word	0x08003758
  ldr r2, =_sbss
 8000b7c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b80:	20000100 	.word	0x20000100

08000b84 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b84:	e7fe      	b.n	8000b84 <ADC1_2_IRQHandler>

08000b86 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b86:	b580      	push	{r7, lr}
 8000b88:	b082      	sub	sp, #8
 8000b8a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b90:	2003      	movs	r0, #3
 8000b92:	f000 f91f 	bl	8000dd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b96:	200f      	movs	r0, #15
 8000b98:	f000 f80e 	bl	8000bb8 <HAL_InitTick>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d002      	beq.n	8000ba8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	71fb      	strb	r3, [r7, #7]
 8000ba6:	e001      	b.n	8000bac <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ba8:	f7ff fe7c 	bl	80008a4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bac:	79fb      	ldrb	r3, [r7, #7]
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	3708      	adds	r7, #8
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
	...

08000bb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b084      	sub	sp, #16
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000bc4:	4b17      	ldr	r3, [pc, #92]	@ (8000c24 <HAL_InitTick+0x6c>)
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d023      	beq.n	8000c14 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000bcc:	4b16      	ldr	r3, [pc, #88]	@ (8000c28 <HAL_InitTick+0x70>)
 8000bce:	681a      	ldr	r2, [r3, #0]
 8000bd0:	4b14      	ldr	r3, [pc, #80]	@ (8000c24 <HAL_InitTick+0x6c>)
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bda:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bde:	fbb2 f3f3 	udiv	r3, r2, r3
 8000be2:	4618      	mov	r0, r3
 8000be4:	f000 f91d 	bl	8000e22 <HAL_SYSTICK_Config>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d10f      	bne.n	8000c0e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	2b0f      	cmp	r3, #15
 8000bf2:	d809      	bhi.n	8000c08 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	6879      	ldr	r1, [r7, #4]
 8000bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bfc:	f000 f8f5 	bl	8000dea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c00:	4a0a      	ldr	r2, [pc, #40]	@ (8000c2c <HAL_InitTick+0x74>)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	6013      	str	r3, [r2, #0]
 8000c06:	e007      	b.n	8000c18 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	73fb      	strb	r3, [r7, #15]
 8000c0c:	e004      	b.n	8000c18 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	73fb      	strb	r3, [r7, #15]
 8000c12:	e001      	b.n	8000c18 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c14:	2301      	movs	r3, #1
 8000c16:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c18:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	3710      	adds	r7, #16
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	20000008 	.word	0x20000008
 8000c28:	20000000 	.word	0x20000000
 8000c2c:	20000004 	.word	0x20000004

08000c30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c34:	4b06      	ldr	r3, [pc, #24]	@ (8000c50 <HAL_IncTick+0x20>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	461a      	mov	r2, r3
 8000c3a:	4b06      	ldr	r3, [pc, #24]	@ (8000c54 <HAL_IncTick+0x24>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	4413      	add	r3, r2
 8000c40:	4a04      	ldr	r2, [pc, #16]	@ (8000c54 <HAL_IncTick+0x24>)
 8000c42:	6013      	str	r3, [r2, #0]
}
 8000c44:	bf00      	nop
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	20000008 	.word	0x20000008
 8000c54:	200000fc 	.word	0x200000fc

08000c58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c5c:	4b03      	ldr	r3, [pc, #12]	@ (8000c6c <HAL_GetTick+0x14>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	200000fc 	.word	0x200000fc

08000c70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b085      	sub	sp, #20
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	f003 0307 	and.w	r3, r3, #7
 8000c7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c80:	4b0c      	ldr	r3, [pc, #48]	@ (8000cb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000c82:	68db      	ldr	r3, [r3, #12]
 8000c84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c86:	68ba      	ldr	r2, [r7, #8]
 8000c88:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c98:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ca0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ca2:	4a04      	ldr	r2, [pc, #16]	@ (8000cb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	60d3      	str	r3, [r2, #12]
}
 8000ca8:	bf00      	nop
 8000caa:	3714      	adds	r7, #20
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr
 8000cb4:	e000ed00 	.word	0xe000ed00

08000cb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cbc:	4b04      	ldr	r3, [pc, #16]	@ (8000cd0 <__NVIC_GetPriorityGrouping+0x18>)
 8000cbe:	68db      	ldr	r3, [r3, #12]
 8000cc0:	0a1b      	lsrs	r3, r3, #8
 8000cc2:	f003 0307 	and.w	r3, r3, #7
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr
 8000cd0:	e000ed00 	.word	0xe000ed00

08000cd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	4603      	mov	r3, r0
 8000cdc:	6039      	str	r1, [r7, #0]
 8000cde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ce0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	db0a      	blt.n	8000cfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	b2da      	uxtb	r2, r3
 8000cec:	490c      	ldr	r1, [pc, #48]	@ (8000d20 <__NVIC_SetPriority+0x4c>)
 8000cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf2:	0112      	lsls	r2, r2, #4
 8000cf4:	b2d2      	uxtb	r2, r2
 8000cf6:	440b      	add	r3, r1
 8000cf8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cfc:	e00a      	b.n	8000d14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	b2da      	uxtb	r2, r3
 8000d02:	4908      	ldr	r1, [pc, #32]	@ (8000d24 <__NVIC_SetPriority+0x50>)
 8000d04:	79fb      	ldrb	r3, [r7, #7]
 8000d06:	f003 030f 	and.w	r3, r3, #15
 8000d0a:	3b04      	subs	r3, #4
 8000d0c:	0112      	lsls	r2, r2, #4
 8000d0e:	b2d2      	uxtb	r2, r2
 8000d10:	440b      	add	r3, r1
 8000d12:	761a      	strb	r2, [r3, #24]
}
 8000d14:	bf00      	nop
 8000d16:	370c      	adds	r7, #12
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr
 8000d20:	e000e100 	.word	0xe000e100
 8000d24:	e000ed00 	.word	0xe000ed00

08000d28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b089      	sub	sp, #36	@ 0x24
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	60f8      	str	r0, [r7, #12]
 8000d30:	60b9      	str	r1, [r7, #8]
 8000d32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	f003 0307 	and.w	r3, r3, #7
 8000d3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d3c:	69fb      	ldr	r3, [r7, #28]
 8000d3e:	f1c3 0307 	rsb	r3, r3, #7
 8000d42:	2b04      	cmp	r3, #4
 8000d44:	bf28      	it	cs
 8000d46:	2304      	movcs	r3, #4
 8000d48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d4a:	69fb      	ldr	r3, [r7, #28]
 8000d4c:	3304      	adds	r3, #4
 8000d4e:	2b06      	cmp	r3, #6
 8000d50:	d902      	bls.n	8000d58 <NVIC_EncodePriority+0x30>
 8000d52:	69fb      	ldr	r3, [r7, #28]
 8000d54:	3b03      	subs	r3, #3
 8000d56:	e000      	b.n	8000d5a <NVIC_EncodePriority+0x32>
 8000d58:	2300      	movs	r3, #0
 8000d5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d5c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d60:	69bb      	ldr	r3, [r7, #24]
 8000d62:	fa02 f303 	lsl.w	r3, r2, r3
 8000d66:	43da      	mvns	r2, r3
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	401a      	ands	r2, r3
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d70:	f04f 31ff 	mov.w	r1, #4294967295
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	fa01 f303 	lsl.w	r3, r1, r3
 8000d7a:	43d9      	mvns	r1, r3
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d80:	4313      	orrs	r3, r2
         );
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	3724      	adds	r7, #36	@ 0x24
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
	...

08000d90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	3b01      	subs	r3, #1
 8000d9c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000da0:	d301      	bcc.n	8000da6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000da2:	2301      	movs	r3, #1
 8000da4:	e00f      	b.n	8000dc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000da6:	4a0a      	ldr	r2, [pc, #40]	@ (8000dd0 <SysTick_Config+0x40>)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	3b01      	subs	r3, #1
 8000dac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dae:	210f      	movs	r1, #15
 8000db0:	f04f 30ff 	mov.w	r0, #4294967295
 8000db4:	f7ff ff8e 	bl	8000cd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000db8:	4b05      	ldr	r3, [pc, #20]	@ (8000dd0 <SysTick_Config+0x40>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dbe:	4b04      	ldr	r3, [pc, #16]	@ (8000dd0 <SysTick_Config+0x40>)
 8000dc0:	2207      	movs	r2, #7
 8000dc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dc4:	2300      	movs	r3, #0
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	3708      	adds	r7, #8
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	e000e010 	.word	0xe000e010

08000dd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ddc:	6878      	ldr	r0, [r7, #4]
 8000dde:	f7ff ff47 	bl	8000c70 <__NVIC_SetPriorityGrouping>
}
 8000de2:	bf00      	nop
 8000de4:	3708      	adds	r7, #8
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}

08000dea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dea:	b580      	push	{r7, lr}
 8000dec:	b086      	sub	sp, #24
 8000dee:	af00      	add	r7, sp, #0
 8000df0:	4603      	mov	r3, r0
 8000df2:	60b9      	str	r1, [r7, #8]
 8000df4:	607a      	str	r2, [r7, #4]
 8000df6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000dfc:	f7ff ff5c 	bl	8000cb8 <__NVIC_GetPriorityGrouping>
 8000e00:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e02:	687a      	ldr	r2, [r7, #4]
 8000e04:	68b9      	ldr	r1, [r7, #8]
 8000e06:	6978      	ldr	r0, [r7, #20]
 8000e08:	f7ff ff8e 	bl	8000d28 <NVIC_EncodePriority>
 8000e0c:	4602      	mov	r2, r0
 8000e0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e12:	4611      	mov	r1, r2
 8000e14:	4618      	mov	r0, r3
 8000e16:	f7ff ff5d 	bl	8000cd4 <__NVIC_SetPriority>
}
 8000e1a:	bf00      	nop
 8000e1c:	3718      	adds	r7, #24
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}

08000e22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e22:	b580      	push	{r7, lr}
 8000e24:	b082      	sub	sp, #8
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e2a:	6878      	ldr	r0, [r7, #4]
 8000e2c:	f7ff ffb0 	bl	8000d90 <SysTick_Config>
 8000e30:	4603      	mov	r3, r0
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	3708      	adds	r7, #8
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
	...

08000e3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b087      	sub	sp, #28
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
 8000e44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e46:	2300      	movs	r3, #0
 8000e48:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e4a:	e17f      	b.n	800114c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	2101      	movs	r1, #1
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	fa01 f303 	lsl.w	r3, r1, r3
 8000e58:	4013      	ands	r3, r2
 8000e5a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	f000 8171 	beq.w	8001146 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	f003 0303 	and.w	r3, r3, #3
 8000e6c:	2b01      	cmp	r3, #1
 8000e6e:	d005      	beq.n	8000e7c <HAL_GPIO_Init+0x40>
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	f003 0303 	and.w	r3, r3, #3
 8000e78:	2b02      	cmp	r3, #2
 8000e7a:	d130      	bne.n	8000ede <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	689b      	ldr	r3, [r3, #8]
 8000e80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	005b      	lsls	r3, r3, #1
 8000e86:	2203      	movs	r2, #3
 8000e88:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8c:	43db      	mvns	r3, r3
 8000e8e:	693a      	ldr	r2, [r7, #16]
 8000e90:	4013      	ands	r3, r2
 8000e92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	68da      	ldr	r2, [r3, #12]
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	005b      	lsls	r3, r3, #1
 8000e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea0:	693a      	ldr	r2, [r7, #16]
 8000ea2:	4313      	orrs	r3, r2
 8000ea4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	693a      	ldr	r2, [r7, #16]
 8000eaa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eba:	43db      	mvns	r3, r3
 8000ebc:	693a      	ldr	r2, [r7, #16]
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	091b      	lsrs	r3, r3, #4
 8000ec8:	f003 0201 	and.w	r2, r3, #1
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed2:	693a      	ldr	r2, [r7, #16]
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	693a      	ldr	r2, [r7, #16]
 8000edc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	f003 0303 	and.w	r3, r3, #3
 8000ee6:	2b03      	cmp	r3, #3
 8000ee8:	d118      	bne.n	8000f1c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000eee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef8:	43db      	mvns	r3, r3
 8000efa:	693a      	ldr	r2, [r7, #16]
 8000efc:	4013      	ands	r3, r2
 8000efe:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	08db      	lsrs	r3, r3, #3
 8000f06:	f003 0201 	and.w	r2, r3, #1
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f10:	693a      	ldr	r2, [r7, #16]
 8000f12:	4313      	orrs	r3, r2
 8000f14:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	693a      	ldr	r2, [r7, #16]
 8000f1a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	f003 0303 	and.w	r3, r3, #3
 8000f24:	2b03      	cmp	r3, #3
 8000f26:	d017      	beq.n	8000f58 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	68db      	ldr	r3, [r3, #12]
 8000f2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	005b      	lsls	r3, r3, #1
 8000f32:	2203      	movs	r2, #3
 8000f34:	fa02 f303 	lsl.w	r3, r2, r3
 8000f38:	43db      	mvns	r3, r3
 8000f3a:	693a      	ldr	r2, [r7, #16]
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	689a      	ldr	r2, [r3, #8]
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	005b      	lsls	r3, r3, #1
 8000f48:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4c:	693a      	ldr	r2, [r7, #16]
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	693a      	ldr	r2, [r7, #16]
 8000f56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	f003 0303 	and.w	r3, r3, #3
 8000f60:	2b02      	cmp	r3, #2
 8000f62:	d123      	bne.n	8000fac <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	08da      	lsrs	r2, r3, #3
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	3208      	adds	r2, #8
 8000f6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f70:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	f003 0307 	and.w	r3, r3, #7
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	220f      	movs	r2, #15
 8000f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f80:	43db      	mvns	r3, r3
 8000f82:	693a      	ldr	r2, [r7, #16]
 8000f84:	4013      	ands	r3, r2
 8000f86:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	691a      	ldr	r2, [r3, #16]
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	f003 0307 	and.w	r3, r3, #7
 8000f92:	009b      	lsls	r3, r3, #2
 8000f94:	fa02 f303 	lsl.w	r3, r2, r3
 8000f98:	693a      	ldr	r2, [r7, #16]
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	08da      	lsrs	r2, r3, #3
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	3208      	adds	r2, #8
 8000fa6:	6939      	ldr	r1, [r7, #16]
 8000fa8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	005b      	lsls	r3, r3, #1
 8000fb6:	2203      	movs	r2, #3
 8000fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbc:	43db      	mvns	r3, r3
 8000fbe:	693a      	ldr	r2, [r7, #16]
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f003 0203 	and.w	r2, r3, #3
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	005b      	lsls	r3, r3, #1
 8000fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd4:	693a      	ldr	r2, [r7, #16]
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	693a      	ldr	r2, [r7, #16]
 8000fde:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	f000 80ac 	beq.w	8001146 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fee:	4b5f      	ldr	r3, [pc, #380]	@ (800116c <HAL_GPIO_Init+0x330>)
 8000ff0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ff2:	4a5e      	ldr	r2, [pc, #376]	@ (800116c <HAL_GPIO_Init+0x330>)
 8000ff4:	f043 0301 	orr.w	r3, r3, #1
 8000ff8:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ffa:	4b5c      	ldr	r3, [pc, #368]	@ (800116c <HAL_GPIO_Init+0x330>)
 8000ffc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ffe:	f003 0301 	and.w	r3, r3, #1
 8001002:	60bb      	str	r3, [r7, #8]
 8001004:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001006:	4a5a      	ldr	r2, [pc, #360]	@ (8001170 <HAL_GPIO_Init+0x334>)
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	089b      	lsrs	r3, r3, #2
 800100c:	3302      	adds	r3, #2
 800100e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001012:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	f003 0303 	and.w	r3, r3, #3
 800101a:	009b      	lsls	r3, r3, #2
 800101c:	220f      	movs	r2, #15
 800101e:	fa02 f303 	lsl.w	r3, r2, r3
 8001022:	43db      	mvns	r3, r3
 8001024:	693a      	ldr	r2, [r7, #16]
 8001026:	4013      	ands	r3, r2
 8001028:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001030:	d025      	beq.n	800107e <HAL_GPIO_Init+0x242>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4a4f      	ldr	r2, [pc, #316]	@ (8001174 <HAL_GPIO_Init+0x338>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d01f      	beq.n	800107a <HAL_GPIO_Init+0x23e>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4a4e      	ldr	r2, [pc, #312]	@ (8001178 <HAL_GPIO_Init+0x33c>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d019      	beq.n	8001076 <HAL_GPIO_Init+0x23a>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4a4d      	ldr	r2, [pc, #308]	@ (800117c <HAL_GPIO_Init+0x340>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d013      	beq.n	8001072 <HAL_GPIO_Init+0x236>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4a4c      	ldr	r2, [pc, #304]	@ (8001180 <HAL_GPIO_Init+0x344>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d00d      	beq.n	800106e <HAL_GPIO_Init+0x232>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4a4b      	ldr	r2, [pc, #300]	@ (8001184 <HAL_GPIO_Init+0x348>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d007      	beq.n	800106a <HAL_GPIO_Init+0x22e>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4a4a      	ldr	r2, [pc, #296]	@ (8001188 <HAL_GPIO_Init+0x34c>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d101      	bne.n	8001066 <HAL_GPIO_Init+0x22a>
 8001062:	2306      	movs	r3, #6
 8001064:	e00c      	b.n	8001080 <HAL_GPIO_Init+0x244>
 8001066:	2307      	movs	r3, #7
 8001068:	e00a      	b.n	8001080 <HAL_GPIO_Init+0x244>
 800106a:	2305      	movs	r3, #5
 800106c:	e008      	b.n	8001080 <HAL_GPIO_Init+0x244>
 800106e:	2304      	movs	r3, #4
 8001070:	e006      	b.n	8001080 <HAL_GPIO_Init+0x244>
 8001072:	2303      	movs	r3, #3
 8001074:	e004      	b.n	8001080 <HAL_GPIO_Init+0x244>
 8001076:	2302      	movs	r3, #2
 8001078:	e002      	b.n	8001080 <HAL_GPIO_Init+0x244>
 800107a:	2301      	movs	r3, #1
 800107c:	e000      	b.n	8001080 <HAL_GPIO_Init+0x244>
 800107e:	2300      	movs	r3, #0
 8001080:	697a      	ldr	r2, [r7, #20]
 8001082:	f002 0203 	and.w	r2, r2, #3
 8001086:	0092      	lsls	r2, r2, #2
 8001088:	4093      	lsls	r3, r2
 800108a:	693a      	ldr	r2, [r7, #16]
 800108c:	4313      	orrs	r3, r2
 800108e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001090:	4937      	ldr	r1, [pc, #220]	@ (8001170 <HAL_GPIO_Init+0x334>)
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	089b      	lsrs	r3, r3, #2
 8001096:	3302      	adds	r3, #2
 8001098:	693a      	ldr	r2, [r7, #16]
 800109a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800109e:	4b3b      	ldr	r3, [pc, #236]	@ (800118c <HAL_GPIO_Init+0x350>)
 80010a0:	689b      	ldr	r3, [r3, #8]
 80010a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	43db      	mvns	r3, r3
 80010a8:	693a      	ldr	r2, [r7, #16]
 80010aa:	4013      	ands	r3, r2
 80010ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d003      	beq.n	80010c2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80010ba:	693a      	ldr	r2, [r7, #16]
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	4313      	orrs	r3, r2
 80010c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80010c2:	4a32      	ldr	r2, [pc, #200]	@ (800118c <HAL_GPIO_Init+0x350>)
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80010c8:	4b30      	ldr	r3, [pc, #192]	@ (800118c <HAL_GPIO_Init+0x350>)
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	43db      	mvns	r3, r3
 80010d2:	693a      	ldr	r2, [r7, #16]
 80010d4:	4013      	ands	r3, r2
 80010d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d003      	beq.n	80010ec <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80010e4:	693a      	ldr	r2, [r7, #16]
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	4313      	orrs	r3, r2
 80010ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80010ec:	4a27      	ldr	r2, [pc, #156]	@ (800118c <HAL_GPIO_Init+0x350>)
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80010f2:	4b26      	ldr	r3, [pc, #152]	@ (800118c <HAL_GPIO_Init+0x350>)
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	43db      	mvns	r3, r3
 80010fc:	693a      	ldr	r2, [r7, #16]
 80010fe:	4013      	ands	r3, r2
 8001100:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800110a:	2b00      	cmp	r3, #0
 800110c:	d003      	beq.n	8001116 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800110e:	693a      	ldr	r2, [r7, #16]
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	4313      	orrs	r3, r2
 8001114:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001116:	4a1d      	ldr	r2, [pc, #116]	@ (800118c <HAL_GPIO_Init+0x350>)
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800111c:	4b1b      	ldr	r3, [pc, #108]	@ (800118c <HAL_GPIO_Init+0x350>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	43db      	mvns	r3, r3
 8001126:	693a      	ldr	r2, [r7, #16]
 8001128:	4013      	ands	r3, r2
 800112a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001134:	2b00      	cmp	r3, #0
 8001136:	d003      	beq.n	8001140 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001138:	693a      	ldr	r2, [r7, #16]
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	4313      	orrs	r3, r2
 800113e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001140:	4a12      	ldr	r2, [pc, #72]	@ (800118c <HAL_GPIO_Init+0x350>)
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	3301      	adds	r3, #1
 800114a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	fa22 f303 	lsr.w	r3, r2, r3
 8001156:	2b00      	cmp	r3, #0
 8001158:	f47f ae78 	bne.w	8000e4c <HAL_GPIO_Init+0x10>
  }
}
 800115c:	bf00      	nop
 800115e:	bf00      	nop
 8001160:	371c      	adds	r7, #28
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	40021000 	.word	0x40021000
 8001170:	40010000 	.word	0x40010000
 8001174:	48000400 	.word	0x48000400
 8001178:	48000800 	.word	0x48000800
 800117c:	48000c00 	.word	0x48000c00
 8001180:	48001000 	.word	0x48001000
 8001184:	48001400 	.word	0x48001400
 8001188:	48001800 	.word	0x48001800
 800118c:	40010400 	.word	0x40010400

08001190 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001190:	b480      	push	{r7}
 8001192:	b085      	sub	sp, #20
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	460b      	mov	r3, r1
 800119a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	691a      	ldr	r2, [r3, #16]
 80011a0:	887b      	ldrh	r3, [r7, #2]
 80011a2:	4013      	ands	r3, r2
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d002      	beq.n	80011ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80011a8:	2301      	movs	r3, #1
 80011aa:	73fb      	strb	r3, [r7, #15]
 80011ac:	e001      	b.n	80011b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80011ae:	2300      	movs	r3, #0
 80011b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80011b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	3714      	adds	r7, #20
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr

080011c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	460b      	mov	r3, r1
 80011ca:	807b      	strh	r3, [r7, #2]
 80011cc:	4613      	mov	r3, r2
 80011ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011d0:	787b      	ldrb	r3, [r7, #1]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d003      	beq.n	80011de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011d6:	887a      	ldrh	r2, [r7, #2]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011dc:	e002      	b.n	80011e4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011de:	887a      	ldrh	r2, [r7, #2]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80011e4:	bf00      	nop
 80011e6:	370c      	adds	r7, #12
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr

080011f0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80011f4:	4b05      	ldr	r3, [pc, #20]	@ (800120c <HAL_PWR_EnableBkUpAccess+0x1c>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a04      	ldr	r2, [pc, #16]	@ (800120c <HAL_PWR_EnableBkUpAccess+0x1c>)
 80011fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011fe:	6013      	str	r3, [r2, #0]
}
 8001200:	bf00      	nop
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	40007000 	.word	0x40007000

08001210 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001214:	4b04      	ldr	r3, [pc, #16]	@ (8001228 <HAL_PWREx_GetVoltageRange+0x18>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800121c:	4618      	mov	r0, r3
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	40007000 	.word	0x40007000

0800122c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800122c:	b480      	push	{r7}
 800122e:	b085      	sub	sp, #20
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800123a:	d130      	bne.n	800129e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800123c:	4b23      	ldr	r3, [pc, #140]	@ (80012cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001244:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001248:	d038      	beq.n	80012bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800124a:	4b20      	ldr	r3, [pc, #128]	@ (80012cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001252:	4a1e      	ldr	r2, [pc, #120]	@ (80012cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001254:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001258:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800125a:	4b1d      	ldr	r3, [pc, #116]	@ (80012d0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	2232      	movs	r2, #50	@ 0x32
 8001260:	fb02 f303 	mul.w	r3, r2, r3
 8001264:	4a1b      	ldr	r2, [pc, #108]	@ (80012d4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001266:	fba2 2303 	umull	r2, r3, r2, r3
 800126a:	0c9b      	lsrs	r3, r3, #18
 800126c:	3301      	adds	r3, #1
 800126e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001270:	e002      	b.n	8001278 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	3b01      	subs	r3, #1
 8001276:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001278:	4b14      	ldr	r3, [pc, #80]	@ (80012cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800127a:	695b      	ldr	r3, [r3, #20]
 800127c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001280:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001284:	d102      	bne.n	800128c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d1f2      	bne.n	8001272 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800128c:	4b0f      	ldr	r3, [pc, #60]	@ (80012cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800128e:	695b      	ldr	r3, [r3, #20]
 8001290:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001294:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001298:	d110      	bne.n	80012bc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800129a:	2303      	movs	r3, #3
 800129c:	e00f      	b.n	80012be <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800129e:	4b0b      	ldr	r3, [pc, #44]	@ (80012cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80012a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80012aa:	d007      	beq.n	80012bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80012ac:	4b07      	ldr	r3, [pc, #28]	@ (80012cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80012b4:	4a05      	ldr	r2, [pc, #20]	@ (80012cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012b6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80012ba:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80012bc:	2300      	movs	r3, #0
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3714      	adds	r7, #20
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	40007000 	.word	0x40007000
 80012d0:	20000000 	.word	0x20000000
 80012d4:	431bde83 	.word	0x431bde83

080012d8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b088      	sub	sp, #32
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d101      	bne.n	80012ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
 80012e8:	e3ca      	b.n	8001a80 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012ea:	4b97      	ldr	r3, [pc, #604]	@ (8001548 <HAL_RCC_OscConfig+0x270>)
 80012ec:	689b      	ldr	r3, [r3, #8]
 80012ee:	f003 030c 	and.w	r3, r3, #12
 80012f2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80012f4:	4b94      	ldr	r3, [pc, #592]	@ (8001548 <HAL_RCC_OscConfig+0x270>)
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	f003 0303 	and.w	r3, r3, #3
 80012fc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f003 0310 	and.w	r3, r3, #16
 8001306:	2b00      	cmp	r3, #0
 8001308:	f000 80e4 	beq.w	80014d4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800130c:	69bb      	ldr	r3, [r7, #24]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d007      	beq.n	8001322 <HAL_RCC_OscConfig+0x4a>
 8001312:	69bb      	ldr	r3, [r7, #24]
 8001314:	2b0c      	cmp	r3, #12
 8001316:	f040 808b 	bne.w	8001430 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	2b01      	cmp	r3, #1
 800131e:	f040 8087 	bne.w	8001430 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001322:	4b89      	ldr	r3, [pc, #548]	@ (8001548 <HAL_RCC_OscConfig+0x270>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f003 0302 	and.w	r3, r3, #2
 800132a:	2b00      	cmp	r3, #0
 800132c:	d005      	beq.n	800133a <HAL_RCC_OscConfig+0x62>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	699b      	ldr	r3, [r3, #24]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d101      	bne.n	800133a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
 8001338:	e3a2      	b.n	8001a80 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6a1a      	ldr	r2, [r3, #32]
 800133e:	4b82      	ldr	r3, [pc, #520]	@ (8001548 <HAL_RCC_OscConfig+0x270>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f003 0308 	and.w	r3, r3, #8
 8001346:	2b00      	cmp	r3, #0
 8001348:	d004      	beq.n	8001354 <HAL_RCC_OscConfig+0x7c>
 800134a:	4b7f      	ldr	r3, [pc, #508]	@ (8001548 <HAL_RCC_OscConfig+0x270>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001352:	e005      	b.n	8001360 <HAL_RCC_OscConfig+0x88>
 8001354:	4b7c      	ldr	r3, [pc, #496]	@ (8001548 <HAL_RCC_OscConfig+0x270>)
 8001356:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800135a:	091b      	lsrs	r3, r3, #4
 800135c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001360:	4293      	cmp	r3, r2
 8001362:	d223      	bcs.n	80013ac <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6a1b      	ldr	r3, [r3, #32]
 8001368:	4618      	mov	r0, r3
 800136a:	f000 fd55 	bl	8001e18 <RCC_SetFlashLatencyFromMSIRange>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001374:	2301      	movs	r3, #1
 8001376:	e383      	b.n	8001a80 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001378:	4b73      	ldr	r3, [pc, #460]	@ (8001548 <HAL_RCC_OscConfig+0x270>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a72      	ldr	r2, [pc, #456]	@ (8001548 <HAL_RCC_OscConfig+0x270>)
 800137e:	f043 0308 	orr.w	r3, r3, #8
 8001382:	6013      	str	r3, [r2, #0]
 8001384:	4b70      	ldr	r3, [pc, #448]	@ (8001548 <HAL_RCC_OscConfig+0x270>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6a1b      	ldr	r3, [r3, #32]
 8001390:	496d      	ldr	r1, [pc, #436]	@ (8001548 <HAL_RCC_OscConfig+0x270>)
 8001392:	4313      	orrs	r3, r2
 8001394:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001396:	4b6c      	ldr	r3, [pc, #432]	@ (8001548 <HAL_RCC_OscConfig+0x270>)
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	69db      	ldr	r3, [r3, #28]
 80013a2:	021b      	lsls	r3, r3, #8
 80013a4:	4968      	ldr	r1, [pc, #416]	@ (8001548 <HAL_RCC_OscConfig+0x270>)
 80013a6:	4313      	orrs	r3, r2
 80013a8:	604b      	str	r3, [r1, #4]
 80013aa:	e025      	b.n	80013f8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013ac:	4b66      	ldr	r3, [pc, #408]	@ (8001548 <HAL_RCC_OscConfig+0x270>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a65      	ldr	r2, [pc, #404]	@ (8001548 <HAL_RCC_OscConfig+0x270>)
 80013b2:	f043 0308 	orr.w	r3, r3, #8
 80013b6:	6013      	str	r3, [r2, #0]
 80013b8:	4b63      	ldr	r3, [pc, #396]	@ (8001548 <HAL_RCC_OscConfig+0x270>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6a1b      	ldr	r3, [r3, #32]
 80013c4:	4960      	ldr	r1, [pc, #384]	@ (8001548 <HAL_RCC_OscConfig+0x270>)
 80013c6:	4313      	orrs	r3, r2
 80013c8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013ca:	4b5f      	ldr	r3, [pc, #380]	@ (8001548 <HAL_RCC_OscConfig+0x270>)
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	69db      	ldr	r3, [r3, #28]
 80013d6:	021b      	lsls	r3, r3, #8
 80013d8:	495b      	ldr	r1, [pc, #364]	@ (8001548 <HAL_RCC_OscConfig+0x270>)
 80013da:	4313      	orrs	r3, r2
 80013dc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80013de:	69bb      	ldr	r3, [r7, #24]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d109      	bne.n	80013f8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6a1b      	ldr	r3, [r3, #32]
 80013e8:	4618      	mov	r0, r3
 80013ea:	f000 fd15 	bl	8001e18 <RCC_SetFlashLatencyFromMSIRange>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80013f4:	2301      	movs	r3, #1
 80013f6:	e343      	b.n	8001a80 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80013f8:	f000 fc4a 	bl	8001c90 <HAL_RCC_GetSysClockFreq>
 80013fc:	4602      	mov	r2, r0
 80013fe:	4b52      	ldr	r3, [pc, #328]	@ (8001548 <HAL_RCC_OscConfig+0x270>)
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	091b      	lsrs	r3, r3, #4
 8001404:	f003 030f 	and.w	r3, r3, #15
 8001408:	4950      	ldr	r1, [pc, #320]	@ (800154c <HAL_RCC_OscConfig+0x274>)
 800140a:	5ccb      	ldrb	r3, [r1, r3]
 800140c:	f003 031f 	and.w	r3, r3, #31
 8001410:	fa22 f303 	lsr.w	r3, r2, r3
 8001414:	4a4e      	ldr	r2, [pc, #312]	@ (8001550 <HAL_RCC_OscConfig+0x278>)
 8001416:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001418:	4b4e      	ldr	r3, [pc, #312]	@ (8001554 <HAL_RCC_OscConfig+0x27c>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4618      	mov	r0, r3
 800141e:	f7ff fbcb 	bl	8000bb8 <HAL_InitTick>
 8001422:	4603      	mov	r3, r0
 8001424:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001426:	7bfb      	ldrb	r3, [r7, #15]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d052      	beq.n	80014d2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800142c:	7bfb      	ldrb	r3, [r7, #15]
 800142e:	e327      	b.n	8001a80 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	699b      	ldr	r3, [r3, #24]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d032      	beq.n	800149e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001438:	4b43      	ldr	r3, [pc, #268]	@ (8001548 <HAL_RCC_OscConfig+0x270>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a42      	ldr	r2, [pc, #264]	@ (8001548 <HAL_RCC_OscConfig+0x270>)
 800143e:	f043 0301 	orr.w	r3, r3, #1
 8001442:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001444:	f7ff fc08 	bl	8000c58 <HAL_GetTick>
 8001448:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800144a:	e008      	b.n	800145e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800144c:	f7ff fc04 	bl	8000c58 <HAL_GetTick>
 8001450:	4602      	mov	r2, r0
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	2b02      	cmp	r3, #2
 8001458:	d901      	bls.n	800145e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800145a:	2303      	movs	r3, #3
 800145c:	e310      	b.n	8001a80 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800145e:	4b3a      	ldr	r3, [pc, #232]	@ (8001548 <HAL_RCC_OscConfig+0x270>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f003 0302 	and.w	r3, r3, #2
 8001466:	2b00      	cmp	r3, #0
 8001468:	d0f0      	beq.n	800144c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800146a:	4b37      	ldr	r3, [pc, #220]	@ (8001548 <HAL_RCC_OscConfig+0x270>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a36      	ldr	r2, [pc, #216]	@ (8001548 <HAL_RCC_OscConfig+0x270>)
 8001470:	f043 0308 	orr.w	r3, r3, #8
 8001474:	6013      	str	r3, [r2, #0]
 8001476:	4b34      	ldr	r3, [pc, #208]	@ (8001548 <HAL_RCC_OscConfig+0x270>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6a1b      	ldr	r3, [r3, #32]
 8001482:	4931      	ldr	r1, [pc, #196]	@ (8001548 <HAL_RCC_OscConfig+0x270>)
 8001484:	4313      	orrs	r3, r2
 8001486:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001488:	4b2f      	ldr	r3, [pc, #188]	@ (8001548 <HAL_RCC_OscConfig+0x270>)
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	69db      	ldr	r3, [r3, #28]
 8001494:	021b      	lsls	r3, r3, #8
 8001496:	492c      	ldr	r1, [pc, #176]	@ (8001548 <HAL_RCC_OscConfig+0x270>)
 8001498:	4313      	orrs	r3, r2
 800149a:	604b      	str	r3, [r1, #4]
 800149c:	e01a      	b.n	80014d4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800149e:	4b2a      	ldr	r3, [pc, #168]	@ (8001548 <HAL_RCC_OscConfig+0x270>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a29      	ldr	r2, [pc, #164]	@ (8001548 <HAL_RCC_OscConfig+0x270>)
 80014a4:	f023 0301 	bic.w	r3, r3, #1
 80014a8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80014aa:	f7ff fbd5 	bl	8000c58 <HAL_GetTick>
 80014ae:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80014b0:	e008      	b.n	80014c4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80014b2:	f7ff fbd1 	bl	8000c58 <HAL_GetTick>
 80014b6:	4602      	mov	r2, r0
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	1ad3      	subs	r3, r2, r3
 80014bc:	2b02      	cmp	r3, #2
 80014be:	d901      	bls.n	80014c4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80014c0:	2303      	movs	r3, #3
 80014c2:	e2dd      	b.n	8001a80 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80014c4:	4b20      	ldr	r3, [pc, #128]	@ (8001548 <HAL_RCC_OscConfig+0x270>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f003 0302 	and.w	r3, r3, #2
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d1f0      	bne.n	80014b2 <HAL_RCC_OscConfig+0x1da>
 80014d0:	e000      	b.n	80014d4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80014d2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f003 0301 	and.w	r3, r3, #1
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d074      	beq.n	80015ca <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80014e0:	69bb      	ldr	r3, [r7, #24]
 80014e2:	2b08      	cmp	r3, #8
 80014e4:	d005      	beq.n	80014f2 <HAL_RCC_OscConfig+0x21a>
 80014e6:	69bb      	ldr	r3, [r7, #24]
 80014e8:	2b0c      	cmp	r3, #12
 80014ea:	d10e      	bne.n	800150a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	2b03      	cmp	r3, #3
 80014f0:	d10b      	bne.n	800150a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014f2:	4b15      	ldr	r3, [pc, #84]	@ (8001548 <HAL_RCC_OscConfig+0x270>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d064      	beq.n	80015c8 <HAL_RCC_OscConfig+0x2f0>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d160      	bne.n	80015c8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	e2ba      	b.n	8001a80 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001512:	d106      	bne.n	8001522 <HAL_RCC_OscConfig+0x24a>
 8001514:	4b0c      	ldr	r3, [pc, #48]	@ (8001548 <HAL_RCC_OscConfig+0x270>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a0b      	ldr	r2, [pc, #44]	@ (8001548 <HAL_RCC_OscConfig+0x270>)
 800151a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800151e:	6013      	str	r3, [r2, #0]
 8001520:	e026      	b.n	8001570 <HAL_RCC_OscConfig+0x298>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800152a:	d115      	bne.n	8001558 <HAL_RCC_OscConfig+0x280>
 800152c:	4b06      	ldr	r3, [pc, #24]	@ (8001548 <HAL_RCC_OscConfig+0x270>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a05      	ldr	r2, [pc, #20]	@ (8001548 <HAL_RCC_OscConfig+0x270>)
 8001532:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001536:	6013      	str	r3, [r2, #0]
 8001538:	4b03      	ldr	r3, [pc, #12]	@ (8001548 <HAL_RCC_OscConfig+0x270>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a02      	ldr	r2, [pc, #8]	@ (8001548 <HAL_RCC_OscConfig+0x270>)
 800153e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001542:	6013      	str	r3, [r2, #0]
 8001544:	e014      	b.n	8001570 <HAL_RCC_OscConfig+0x298>
 8001546:	bf00      	nop
 8001548:	40021000 	.word	0x40021000
 800154c:	08003700 	.word	0x08003700
 8001550:	20000000 	.word	0x20000000
 8001554:	20000004 	.word	0x20000004
 8001558:	4ba0      	ldr	r3, [pc, #640]	@ (80017dc <HAL_RCC_OscConfig+0x504>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a9f      	ldr	r2, [pc, #636]	@ (80017dc <HAL_RCC_OscConfig+0x504>)
 800155e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001562:	6013      	str	r3, [r2, #0]
 8001564:	4b9d      	ldr	r3, [pc, #628]	@ (80017dc <HAL_RCC_OscConfig+0x504>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a9c      	ldr	r2, [pc, #624]	@ (80017dc <HAL_RCC_OscConfig+0x504>)
 800156a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800156e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d013      	beq.n	80015a0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001578:	f7ff fb6e 	bl	8000c58 <HAL_GetTick>
 800157c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800157e:	e008      	b.n	8001592 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001580:	f7ff fb6a 	bl	8000c58 <HAL_GetTick>
 8001584:	4602      	mov	r2, r0
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	2b64      	cmp	r3, #100	@ 0x64
 800158c:	d901      	bls.n	8001592 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800158e:	2303      	movs	r3, #3
 8001590:	e276      	b.n	8001a80 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001592:	4b92      	ldr	r3, [pc, #584]	@ (80017dc <HAL_RCC_OscConfig+0x504>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800159a:	2b00      	cmp	r3, #0
 800159c:	d0f0      	beq.n	8001580 <HAL_RCC_OscConfig+0x2a8>
 800159e:	e014      	b.n	80015ca <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015a0:	f7ff fb5a 	bl	8000c58 <HAL_GetTick>
 80015a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015a6:	e008      	b.n	80015ba <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015a8:	f7ff fb56 	bl	8000c58 <HAL_GetTick>
 80015ac:	4602      	mov	r2, r0
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	2b64      	cmp	r3, #100	@ 0x64
 80015b4:	d901      	bls.n	80015ba <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80015b6:	2303      	movs	r3, #3
 80015b8:	e262      	b.n	8001a80 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015ba:	4b88      	ldr	r3, [pc, #544]	@ (80017dc <HAL_RCC_OscConfig+0x504>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d1f0      	bne.n	80015a8 <HAL_RCC_OscConfig+0x2d0>
 80015c6:	e000      	b.n	80015ca <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f003 0302 	and.w	r3, r3, #2
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d060      	beq.n	8001698 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80015d6:	69bb      	ldr	r3, [r7, #24]
 80015d8:	2b04      	cmp	r3, #4
 80015da:	d005      	beq.n	80015e8 <HAL_RCC_OscConfig+0x310>
 80015dc:	69bb      	ldr	r3, [r7, #24]
 80015de:	2b0c      	cmp	r3, #12
 80015e0:	d119      	bne.n	8001616 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	2b02      	cmp	r3, #2
 80015e6:	d116      	bne.n	8001616 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015e8:	4b7c      	ldr	r3, [pc, #496]	@ (80017dc <HAL_RCC_OscConfig+0x504>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d005      	beq.n	8001600 <HAL_RCC_OscConfig+0x328>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d101      	bne.n	8001600 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80015fc:	2301      	movs	r3, #1
 80015fe:	e23f      	b.n	8001a80 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001600:	4b76      	ldr	r3, [pc, #472]	@ (80017dc <HAL_RCC_OscConfig+0x504>)
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	691b      	ldr	r3, [r3, #16]
 800160c:	061b      	lsls	r3, r3, #24
 800160e:	4973      	ldr	r1, [pc, #460]	@ (80017dc <HAL_RCC_OscConfig+0x504>)
 8001610:	4313      	orrs	r3, r2
 8001612:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001614:	e040      	b.n	8001698 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	68db      	ldr	r3, [r3, #12]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d023      	beq.n	8001666 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800161e:	4b6f      	ldr	r3, [pc, #444]	@ (80017dc <HAL_RCC_OscConfig+0x504>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a6e      	ldr	r2, [pc, #440]	@ (80017dc <HAL_RCC_OscConfig+0x504>)
 8001624:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001628:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800162a:	f7ff fb15 	bl	8000c58 <HAL_GetTick>
 800162e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001630:	e008      	b.n	8001644 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001632:	f7ff fb11 	bl	8000c58 <HAL_GetTick>
 8001636:	4602      	mov	r2, r0
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	1ad3      	subs	r3, r2, r3
 800163c:	2b02      	cmp	r3, #2
 800163e:	d901      	bls.n	8001644 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001640:	2303      	movs	r3, #3
 8001642:	e21d      	b.n	8001a80 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001644:	4b65      	ldr	r3, [pc, #404]	@ (80017dc <HAL_RCC_OscConfig+0x504>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800164c:	2b00      	cmp	r3, #0
 800164e:	d0f0      	beq.n	8001632 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001650:	4b62      	ldr	r3, [pc, #392]	@ (80017dc <HAL_RCC_OscConfig+0x504>)
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	691b      	ldr	r3, [r3, #16]
 800165c:	061b      	lsls	r3, r3, #24
 800165e:	495f      	ldr	r1, [pc, #380]	@ (80017dc <HAL_RCC_OscConfig+0x504>)
 8001660:	4313      	orrs	r3, r2
 8001662:	604b      	str	r3, [r1, #4]
 8001664:	e018      	b.n	8001698 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001666:	4b5d      	ldr	r3, [pc, #372]	@ (80017dc <HAL_RCC_OscConfig+0x504>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a5c      	ldr	r2, [pc, #368]	@ (80017dc <HAL_RCC_OscConfig+0x504>)
 800166c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001670:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001672:	f7ff faf1 	bl	8000c58 <HAL_GetTick>
 8001676:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001678:	e008      	b.n	800168c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800167a:	f7ff faed 	bl	8000c58 <HAL_GetTick>
 800167e:	4602      	mov	r2, r0
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	1ad3      	subs	r3, r2, r3
 8001684:	2b02      	cmp	r3, #2
 8001686:	d901      	bls.n	800168c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001688:	2303      	movs	r3, #3
 800168a:	e1f9      	b.n	8001a80 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800168c:	4b53      	ldr	r3, [pc, #332]	@ (80017dc <HAL_RCC_OscConfig+0x504>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001694:	2b00      	cmp	r3, #0
 8001696:	d1f0      	bne.n	800167a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f003 0308 	and.w	r3, r3, #8
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d03c      	beq.n	800171e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	695b      	ldr	r3, [r3, #20]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d01c      	beq.n	80016e6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016ac:	4b4b      	ldr	r3, [pc, #300]	@ (80017dc <HAL_RCC_OscConfig+0x504>)
 80016ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016b2:	4a4a      	ldr	r2, [pc, #296]	@ (80017dc <HAL_RCC_OscConfig+0x504>)
 80016b4:	f043 0301 	orr.w	r3, r3, #1
 80016b8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016bc:	f7ff facc 	bl	8000c58 <HAL_GetTick>
 80016c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016c2:	e008      	b.n	80016d6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016c4:	f7ff fac8 	bl	8000c58 <HAL_GetTick>
 80016c8:	4602      	mov	r2, r0
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	2b02      	cmp	r3, #2
 80016d0:	d901      	bls.n	80016d6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80016d2:	2303      	movs	r3, #3
 80016d4:	e1d4      	b.n	8001a80 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016d6:	4b41      	ldr	r3, [pc, #260]	@ (80017dc <HAL_RCC_OscConfig+0x504>)
 80016d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016dc:	f003 0302 	and.w	r3, r3, #2
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d0ef      	beq.n	80016c4 <HAL_RCC_OscConfig+0x3ec>
 80016e4:	e01b      	b.n	800171e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016e6:	4b3d      	ldr	r3, [pc, #244]	@ (80017dc <HAL_RCC_OscConfig+0x504>)
 80016e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016ec:	4a3b      	ldr	r2, [pc, #236]	@ (80017dc <HAL_RCC_OscConfig+0x504>)
 80016ee:	f023 0301 	bic.w	r3, r3, #1
 80016f2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016f6:	f7ff faaf 	bl	8000c58 <HAL_GetTick>
 80016fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016fc:	e008      	b.n	8001710 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016fe:	f7ff faab 	bl	8000c58 <HAL_GetTick>
 8001702:	4602      	mov	r2, r0
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	1ad3      	subs	r3, r2, r3
 8001708:	2b02      	cmp	r3, #2
 800170a:	d901      	bls.n	8001710 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800170c:	2303      	movs	r3, #3
 800170e:	e1b7      	b.n	8001a80 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001710:	4b32      	ldr	r3, [pc, #200]	@ (80017dc <HAL_RCC_OscConfig+0x504>)
 8001712:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001716:	f003 0302 	and.w	r3, r3, #2
 800171a:	2b00      	cmp	r3, #0
 800171c:	d1ef      	bne.n	80016fe <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 0304 	and.w	r3, r3, #4
 8001726:	2b00      	cmp	r3, #0
 8001728:	f000 80a6 	beq.w	8001878 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800172c:	2300      	movs	r3, #0
 800172e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001730:	4b2a      	ldr	r3, [pc, #168]	@ (80017dc <HAL_RCC_OscConfig+0x504>)
 8001732:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001734:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001738:	2b00      	cmp	r3, #0
 800173a:	d10d      	bne.n	8001758 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800173c:	4b27      	ldr	r3, [pc, #156]	@ (80017dc <HAL_RCC_OscConfig+0x504>)
 800173e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001740:	4a26      	ldr	r2, [pc, #152]	@ (80017dc <HAL_RCC_OscConfig+0x504>)
 8001742:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001746:	6593      	str	r3, [r2, #88]	@ 0x58
 8001748:	4b24      	ldr	r3, [pc, #144]	@ (80017dc <HAL_RCC_OscConfig+0x504>)
 800174a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800174c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001750:	60bb      	str	r3, [r7, #8]
 8001752:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001754:	2301      	movs	r3, #1
 8001756:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001758:	4b21      	ldr	r3, [pc, #132]	@ (80017e0 <HAL_RCC_OscConfig+0x508>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001760:	2b00      	cmp	r3, #0
 8001762:	d118      	bne.n	8001796 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001764:	4b1e      	ldr	r3, [pc, #120]	@ (80017e0 <HAL_RCC_OscConfig+0x508>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a1d      	ldr	r2, [pc, #116]	@ (80017e0 <HAL_RCC_OscConfig+0x508>)
 800176a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800176e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001770:	f7ff fa72 	bl	8000c58 <HAL_GetTick>
 8001774:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001776:	e008      	b.n	800178a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001778:	f7ff fa6e 	bl	8000c58 <HAL_GetTick>
 800177c:	4602      	mov	r2, r0
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	2b02      	cmp	r3, #2
 8001784:	d901      	bls.n	800178a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001786:	2303      	movs	r3, #3
 8001788:	e17a      	b.n	8001a80 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800178a:	4b15      	ldr	r3, [pc, #84]	@ (80017e0 <HAL_RCC_OscConfig+0x508>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001792:	2b00      	cmp	r3, #0
 8001794:	d0f0      	beq.n	8001778 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	2b01      	cmp	r3, #1
 800179c:	d108      	bne.n	80017b0 <HAL_RCC_OscConfig+0x4d8>
 800179e:	4b0f      	ldr	r3, [pc, #60]	@ (80017dc <HAL_RCC_OscConfig+0x504>)
 80017a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017a4:	4a0d      	ldr	r2, [pc, #52]	@ (80017dc <HAL_RCC_OscConfig+0x504>)
 80017a6:	f043 0301 	orr.w	r3, r3, #1
 80017aa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80017ae:	e029      	b.n	8001804 <HAL_RCC_OscConfig+0x52c>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	2b05      	cmp	r3, #5
 80017b6:	d115      	bne.n	80017e4 <HAL_RCC_OscConfig+0x50c>
 80017b8:	4b08      	ldr	r3, [pc, #32]	@ (80017dc <HAL_RCC_OscConfig+0x504>)
 80017ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017be:	4a07      	ldr	r2, [pc, #28]	@ (80017dc <HAL_RCC_OscConfig+0x504>)
 80017c0:	f043 0304 	orr.w	r3, r3, #4
 80017c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80017c8:	4b04      	ldr	r3, [pc, #16]	@ (80017dc <HAL_RCC_OscConfig+0x504>)
 80017ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017ce:	4a03      	ldr	r2, [pc, #12]	@ (80017dc <HAL_RCC_OscConfig+0x504>)
 80017d0:	f043 0301 	orr.w	r3, r3, #1
 80017d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80017d8:	e014      	b.n	8001804 <HAL_RCC_OscConfig+0x52c>
 80017da:	bf00      	nop
 80017dc:	40021000 	.word	0x40021000
 80017e0:	40007000 	.word	0x40007000
 80017e4:	4b9c      	ldr	r3, [pc, #624]	@ (8001a58 <HAL_RCC_OscConfig+0x780>)
 80017e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017ea:	4a9b      	ldr	r2, [pc, #620]	@ (8001a58 <HAL_RCC_OscConfig+0x780>)
 80017ec:	f023 0301 	bic.w	r3, r3, #1
 80017f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80017f4:	4b98      	ldr	r3, [pc, #608]	@ (8001a58 <HAL_RCC_OscConfig+0x780>)
 80017f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017fa:	4a97      	ldr	r2, [pc, #604]	@ (8001a58 <HAL_RCC_OscConfig+0x780>)
 80017fc:	f023 0304 	bic.w	r3, r3, #4
 8001800:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d016      	beq.n	800183a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800180c:	f7ff fa24 	bl	8000c58 <HAL_GetTick>
 8001810:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001812:	e00a      	b.n	800182a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001814:	f7ff fa20 	bl	8000c58 <HAL_GetTick>
 8001818:	4602      	mov	r2, r0
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001822:	4293      	cmp	r3, r2
 8001824:	d901      	bls.n	800182a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001826:	2303      	movs	r3, #3
 8001828:	e12a      	b.n	8001a80 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800182a:	4b8b      	ldr	r3, [pc, #556]	@ (8001a58 <HAL_RCC_OscConfig+0x780>)
 800182c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001830:	f003 0302 	and.w	r3, r3, #2
 8001834:	2b00      	cmp	r3, #0
 8001836:	d0ed      	beq.n	8001814 <HAL_RCC_OscConfig+0x53c>
 8001838:	e015      	b.n	8001866 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800183a:	f7ff fa0d 	bl	8000c58 <HAL_GetTick>
 800183e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001840:	e00a      	b.n	8001858 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001842:	f7ff fa09 	bl	8000c58 <HAL_GetTick>
 8001846:	4602      	mov	r2, r0
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	1ad3      	subs	r3, r2, r3
 800184c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001850:	4293      	cmp	r3, r2
 8001852:	d901      	bls.n	8001858 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001854:	2303      	movs	r3, #3
 8001856:	e113      	b.n	8001a80 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001858:	4b7f      	ldr	r3, [pc, #508]	@ (8001a58 <HAL_RCC_OscConfig+0x780>)
 800185a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800185e:	f003 0302 	and.w	r3, r3, #2
 8001862:	2b00      	cmp	r3, #0
 8001864:	d1ed      	bne.n	8001842 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001866:	7ffb      	ldrb	r3, [r7, #31]
 8001868:	2b01      	cmp	r3, #1
 800186a:	d105      	bne.n	8001878 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800186c:	4b7a      	ldr	r3, [pc, #488]	@ (8001a58 <HAL_RCC_OscConfig+0x780>)
 800186e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001870:	4a79      	ldr	r2, [pc, #484]	@ (8001a58 <HAL_RCC_OscConfig+0x780>)
 8001872:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001876:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800187c:	2b00      	cmp	r3, #0
 800187e:	f000 80fe 	beq.w	8001a7e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001886:	2b02      	cmp	r3, #2
 8001888:	f040 80d0 	bne.w	8001a2c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800188c:	4b72      	ldr	r3, [pc, #456]	@ (8001a58 <HAL_RCC_OscConfig+0x780>)
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	f003 0203 	and.w	r2, r3, #3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800189c:	429a      	cmp	r2, r3
 800189e:	d130      	bne.n	8001902 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018aa:	3b01      	subs	r3, #1
 80018ac:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ae:	429a      	cmp	r2, r3
 80018b0:	d127      	bne.n	8001902 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018bc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018be:	429a      	cmp	r2, r3
 80018c0:	d11f      	bne.n	8001902 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018c8:	687a      	ldr	r2, [r7, #4]
 80018ca:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80018cc:	2a07      	cmp	r2, #7
 80018ce:	bf14      	ite	ne
 80018d0:	2201      	movne	r2, #1
 80018d2:	2200      	moveq	r2, #0
 80018d4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d113      	bne.n	8001902 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018e4:	085b      	lsrs	r3, r3, #1
 80018e6:	3b01      	subs	r3, #1
 80018e8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80018ea:	429a      	cmp	r2, r3
 80018ec:	d109      	bne.n	8001902 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018f8:	085b      	lsrs	r3, r3, #1
 80018fa:	3b01      	subs	r3, #1
 80018fc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018fe:	429a      	cmp	r2, r3
 8001900:	d06e      	beq.n	80019e0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001902:	69bb      	ldr	r3, [r7, #24]
 8001904:	2b0c      	cmp	r3, #12
 8001906:	d069      	beq.n	80019dc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001908:	4b53      	ldr	r3, [pc, #332]	@ (8001a58 <HAL_RCC_OscConfig+0x780>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001910:	2b00      	cmp	r3, #0
 8001912:	d105      	bne.n	8001920 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001914:	4b50      	ldr	r3, [pc, #320]	@ (8001a58 <HAL_RCC_OscConfig+0x780>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800191c:	2b00      	cmp	r3, #0
 800191e:	d001      	beq.n	8001924 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	e0ad      	b.n	8001a80 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001924:	4b4c      	ldr	r3, [pc, #304]	@ (8001a58 <HAL_RCC_OscConfig+0x780>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a4b      	ldr	r2, [pc, #300]	@ (8001a58 <HAL_RCC_OscConfig+0x780>)
 800192a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800192e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001930:	f7ff f992 	bl	8000c58 <HAL_GetTick>
 8001934:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001936:	e008      	b.n	800194a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001938:	f7ff f98e 	bl	8000c58 <HAL_GetTick>
 800193c:	4602      	mov	r2, r0
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	2b02      	cmp	r3, #2
 8001944:	d901      	bls.n	800194a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001946:	2303      	movs	r3, #3
 8001948:	e09a      	b.n	8001a80 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800194a:	4b43      	ldr	r3, [pc, #268]	@ (8001a58 <HAL_RCC_OscConfig+0x780>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d1f0      	bne.n	8001938 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001956:	4b40      	ldr	r3, [pc, #256]	@ (8001a58 <HAL_RCC_OscConfig+0x780>)
 8001958:	68da      	ldr	r2, [r3, #12]
 800195a:	4b40      	ldr	r3, [pc, #256]	@ (8001a5c <HAL_RCC_OscConfig+0x784>)
 800195c:	4013      	ands	r3, r2
 800195e:	687a      	ldr	r2, [r7, #4]
 8001960:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001962:	687a      	ldr	r2, [r7, #4]
 8001964:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001966:	3a01      	subs	r2, #1
 8001968:	0112      	lsls	r2, r2, #4
 800196a:	4311      	orrs	r1, r2
 800196c:	687a      	ldr	r2, [r7, #4]
 800196e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001970:	0212      	lsls	r2, r2, #8
 8001972:	4311      	orrs	r1, r2
 8001974:	687a      	ldr	r2, [r7, #4]
 8001976:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001978:	0852      	lsrs	r2, r2, #1
 800197a:	3a01      	subs	r2, #1
 800197c:	0552      	lsls	r2, r2, #21
 800197e:	4311      	orrs	r1, r2
 8001980:	687a      	ldr	r2, [r7, #4]
 8001982:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001984:	0852      	lsrs	r2, r2, #1
 8001986:	3a01      	subs	r2, #1
 8001988:	0652      	lsls	r2, r2, #25
 800198a:	4311      	orrs	r1, r2
 800198c:	687a      	ldr	r2, [r7, #4]
 800198e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001990:	0912      	lsrs	r2, r2, #4
 8001992:	0452      	lsls	r2, r2, #17
 8001994:	430a      	orrs	r2, r1
 8001996:	4930      	ldr	r1, [pc, #192]	@ (8001a58 <HAL_RCC_OscConfig+0x780>)
 8001998:	4313      	orrs	r3, r2
 800199a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800199c:	4b2e      	ldr	r3, [pc, #184]	@ (8001a58 <HAL_RCC_OscConfig+0x780>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a2d      	ldr	r2, [pc, #180]	@ (8001a58 <HAL_RCC_OscConfig+0x780>)
 80019a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80019a6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019a8:	4b2b      	ldr	r3, [pc, #172]	@ (8001a58 <HAL_RCC_OscConfig+0x780>)
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	4a2a      	ldr	r2, [pc, #168]	@ (8001a58 <HAL_RCC_OscConfig+0x780>)
 80019ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80019b2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80019b4:	f7ff f950 	bl	8000c58 <HAL_GetTick>
 80019b8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019ba:	e008      	b.n	80019ce <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019bc:	f7ff f94c 	bl	8000c58 <HAL_GetTick>
 80019c0:	4602      	mov	r2, r0
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	2b02      	cmp	r3, #2
 80019c8:	d901      	bls.n	80019ce <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80019ca:	2303      	movs	r3, #3
 80019cc:	e058      	b.n	8001a80 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019ce:	4b22      	ldr	r3, [pc, #136]	@ (8001a58 <HAL_RCC_OscConfig+0x780>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d0f0      	beq.n	80019bc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019da:	e050      	b.n	8001a7e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	e04f      	b.n	8001a80 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019e0:	4b1d      	ldr	r3, [pc, #116]	@ (8001a58 <HAL_RCC_OscConfig+0x780>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d148      	bne.n	8001a7e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80019ec:	4b1a      	ldr	r3, [pc, #104]	@ (8001a58 <HAL_RCC_OscConfig+0x780>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a19      	ldr	r2, [pc, #100]	@ (8001a58 <HAL_RCC_OscConfig+0x780>)
 80019f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80019f6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019f8:	4b17      	ldr	r3, [pc, #92]	@ (8001a58 <HAL_RCC_OscConfig+0x780>)
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	4a16      	ldr	r2, [pc, #88]	@ (8001a58 <HAL_RCC_OscConfig+0x780>)
 80019fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a02:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001a04:	f7ff f928 	bl	8000c58 <HAL_GetTick>
 8001a08:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a0a:	e008      	b.n	8001a1e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a0c:	f7ff f924 	bl	8000c58 <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d901      	bls.n	8001a1e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e030      	b.n	8001a80 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a1e:	4b0e      	ldr	r3, [pc, #56]	@ (8001a58 <HAL_RCC_OscConfig+0x780>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d0f0      	beq.n	8001a0c <HAL_RCC_OscConfig+0x734>
 8001a2a:	e028      	b.n	8001a7e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a2c:	69bb      	ldr	r3, [r7, #24]
 8001a2e:	2b0c      	cmp	r3, #12
 8001a30:	d023      	beq.n	8001a7a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a32:	4b09      	ldr	r3, [pc, #36]	@ (8001a58 <HAL_RCC_OscConfig+0x780>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a08      	ldr	r2, [pc, #32]	@ (8001a58 <HAL_RCC_OscConfig+0x780>)
 8001a38:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001a3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a3e:	f7ff f90b 	bl	8000c58 <HAL_GetTick>
 8001a42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a44:	e00c      	b.n	8001a60 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a46:	f7ff f907 	bl	8000c58 <HAL_GetTick>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	1ad3      	subs	r3, r2, r3
 8001a50:	2b02      	cmp	r3, #2
 8001a52:	d905      	bls.n	8001a60 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001a54:	2303      	movs	r3, #3
 8001a56:	e013      	b.n	8001a80 <HAL_RCC_OscConfig+0x7a8>
 8001a58:	40021000 	.word	0x40021000
 8001a5c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a60:	4b09      	ldr	r3, [pc, #36]	@ (8001a88 <HAL_RCC_OscConfig+0x7b0>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d1ec      	bne.n	8001a46 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001a6c:	4b06      	ldr	r3, [pc, #24]	@ (8001a88 <HAL_RCC_OscConfig+0x7b0>)
 8001a6e:	68da      	ldr	r2, [r3, #12]
 8001a70:	4905      	ldr	r1, [pc, #20]	@ (8001a88 <HAL_RCC_OscConfig+0x7b0>)
 8001a72:	4b06      	ldr	r3, [pc, #24]	@ (8001a8c <HAL_RCC_OscConfig+0x7b4>)
 8001a74:	4013      	ands	r3, r2
 8001a76:	60cb      	str	r3, [r1, #12]
 8001a78:	e001      	b.n	8001a7e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e000      	b.n	8001a80 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001a7e:	2300      	movs	r3, #0
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	3720      	adds	r7, #32
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	40021000 	.word	0x40021000
 8001a8c:	feeefffc 	.word	0xfeeefffc

08001a90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b084      	sub	sp, #16
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d101      	bne.n	8001aa4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e0e7      	b.n	8001c74 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001aa4:	4b75      	ldr	r3, [pc, #468]	@ (8001c7c <HAL_RCC_ClockConfig+0x1ec>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f003 0307 	and.w	r3, r3, #7
 8001aac:	683a      	ldr	r2, [r7, #0]
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	d910      	bls.n	8001ad4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ab2:	4b72      	ldr	r3, [pc, #456]	@ (8001c7c <HAL_RCC_ClockConfig+0x1ec>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f023 0207 	bic.w	r2, r3, #7
 8001aba:	4970      	ldr	r1, [pc, #448]	@ (8001c7c <HAL_RCC_ClockConfig+0x1ec>)
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ac2:	4b6e      	ldr	r3, [pc, #440]	@ (8001c7c <HAL_RCC_ClockConfig+0x1ec>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 0307 	and.w	r3, r3, #7
 8001aca:	683a      	ldr	r2, [r7, #0]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d001      	beq.n	8001ad4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e0cf      	b.n	8001c74 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 0302 	and.w	r3, r3, #2
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d010      	beq.n	8001b02 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	689a      	ldr	r2, [r3, #8]
 8001ae4:	4b66      	ldr	r3, [pc, #408]	@ (8001c80 <HAL_RCC_ClockConfig+0x1f0>)
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d908      	bls.n	8001b02 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001af0:	4b63      	ldr	r3, [pc, #396]	@ (8001c80 <HAL_RCC_ClockConfig+0x1f0>)
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	4960      	ldr	r1, [pc, #384]	@ (8001c80 <HAL_RCC_ClockConfig+0x1f0>)
 8001afe:	4313      	orrs	r3, r2
 8001b00:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 0301 	and.w	r3, r3, #1
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d04c      	beq.n	8001ba8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	2b03      	cmp	r3, #3
 8001b14:	d107      	bne.n	8001b26 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b16:	4b5a      	ldr	r3, [pc, #360]	@ (8001c80 <HAL_RCC_ClockConfig+0x1f0>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d121      	bne.n	8001b66 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e0a6      	b.n	8001c74 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	2b02      	cmp	r3, #2
 8001b2c:	d107      	bne.n	8001b3e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b2e:	4b54      	ldr	r3, [pc, #336]	@ (8001c80 <HAL_RCC_ClockConfig+0x1f0>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d115      	bne.n	8001b66 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e09a      	b.n	8001c74 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d107      	bne.n	8001b56 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b46:	4b4e      	ldr	r3, [pc, #312]	@ (8001c80 <HAL_RCC_ClockConfig+0x1f0>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 0302 	and.w	r3, r3, #2
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d109      	bne.n	8001b66 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e08e      	b.n	8001c74 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b56:	4b4a      	ldr	r3, [pc, #296]	@ (8001c80 <HAL_RCC_ClockConfig+0x1f0>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d101      	bne.n	8001b66 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e086      	b.n	8001c74 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b66:	4b46      	ldr	r3, [pc, #280]	@ (8001c80 <HAL_RCC_ClockConfig+0x1f0>)
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	f023 0203 	bic.w	r2, r3, #3
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	4943      	ldr	r1, [pc, #268]	@ (8001c80 <HAL_RCC_ClockConfig+0x1f0>)
 8001b74:	4313      	orrs	r3, r2
 8001b76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b78:	f7ff f86e 	bl	8000c58 <HAL_GetTick>
 8001b7c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b7e:	e00a      	b.n	8001b96 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b80:	f7ff f86a 	bl	8000c58 <HAL_GetTick>
 8001b84:	4602      	mov	r2, r0
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d901      	bls.n	8001b96 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001b92:	2303      	movs	r3, #3
 8001b94:	e06e      	b.n	8001c74 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b96:	4b3a      	ldr	r3, [pc, #232]	@ (8001c80 <HAL_RCC_ClockConfig+0x1f0>)
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	f003 020c 	and.w	r2, r3, #12
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d1eb      	bne.n	8001b80 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 0302 	and.w	r3, r3, #2
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d010      	beq.n	8001bd6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	689a      	ldr	r2, [r3, #8]
 8001bb8:	4b31      	ldr	r3, [pc, #196]	@ (8001c80 <HAL_RCC_ClockConfig+0x1f0>)
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d208      	bcs.n	8001bd6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bc4:	4b2e      	ldr	r3, [pc, #184]	@ (8001c80 <HAL_RCC_ClockConfig+0x1f0>)
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	492b      	ldr	r1, [pc, #172]	@ (8001c80 <HAL_RCC_ClockConfig+0x1f0>)
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bd6:	4b29      	ldr	r3, [pc, #164]	@ (8001c7c <HAL_RCC_ClockConfig+0x1ec>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0307 	and.w	r3, r3, #7
 8001bde:	683a      	ldr	r2, [r7, #0]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d210      	bcs.n	8001c06 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001be4:	4b25      	ldr	r3, [pc, #148]	@ (8001c7c <HAL_RCC_ClockConfig+0x1ec>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f023 0207 	bic.w	r2, r3, #7
 8001bec:	4923      	ldr	r1, [pc, #140]	@ (8001c7c <HAL_RCC_ClockConfig+0x1ec>)
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bf4:	4b21      	ldr	r3, [pc, #132]	@ (8001c7c <HAL_RCC_ClockConfig+0x1ec>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 0307 	and.w	r3, r3, #7
 8001bfc:	683a      	ldr	r2, [r7, #0]
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	d001      	beq.n	8001c06 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e036      	b.n	8001c74 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 0304 	and.w	r3, r3, #4
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d008      	beq.n	8001c24 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c12:	4b1b      	ldr	r3, [pc, #108]	@ (8001c80 <HAL_RCC_ClockConfig+0x1f0>)
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	68db      	ldr	r3, [r3, #12]
 8001c1e:	4918      	ldr	r1, [pc, #96]	@ (8001c80 <HAL_RCC_ClockConfig+0x1f0>)
 8001c20:	4313      	orrs	r3, r2
 8001c22:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 0308 	and.w	r3, r3, #8
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d009      	beq.n	8001c44 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c30:	4b13      	ldr	r3, [pc, #76]	@ (8001c80 <HAL_RCC_ClockConfig+0x1f0>)
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	691b      	ldr	r3, [r3, #16]
 8001c3c:	00db      	lsls	r3, r3, #3
 8001c3e:	4910      	ldr	r1, [pc, #64]	@ (8001c80 <HAL_RCC_ClockConfig+0x1f0>)
 8001c40:	4313      	orrs	r3, r2
 8001c42:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c44:	f000 f824 	bl	8001c90 <HAL_RCC_GetSysClockFreq>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	4b0d      	ldr	r3, [pc, #52]	@ (8001c80 <HAL_RCC_ClockConfig+0x1f0>)
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	091b      	lsrs	r3, r3, #4
 8001c50:	f003 030f 	and.w	r3, r3, #15
 8001c54:	490b      	ldr	r1, [pc, #44]	@ (8001c84 <HAL_RCC_ClockConfig+0x1f4>)
 8001c56:	5ccb      	ldrb	r3, [r1, r3]
 8001c58:	f003 031f 	and.w	r3, r3, #31
 8001c5c:	fa22 f303 	lsr.w	r3, r2, r3
 8001c60:	4a09      	ldr	r2, [pc, #36]	@ (8001c88 <HAL_RCC_ClockConfig+0x1f8>)
 8001c62:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001c64:	4b09      	ldr	r3, [pc, #36]	@ (8001c8c <HAL_RCC_ClockConfig+0x1fc>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7fe ffa5 	bl	8000bb8 <HAL_InitTick>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	72fb      	strb	r3, [r7, #11]

  return status;
 8001c72:	7afb      	ldrb	r3, [r7, #11]
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3710      	adds	r7, #16
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	40022000 	.word	0x40022000
 8001c80:	40021000 	.word	0x40021000
 8001c84:	08003700 	.word	0x08003700
 8001c88:	20000000 	.word	0x20000000
 8001c8c:	20000004 	.word	0x20000004

08001c90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b089      	sub	sp, #36	@ 0x24
 8001c94:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001c96:	2300      	movs	r3, #0
 8001c98:	61fb      	str	r3, [r7, #28]
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c9e:	4b3e      	ldr	r3, [pc, #248]	@ (8001d98 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	f003 030c 	and.w	r3, r3, #12
 8001ca6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ca8:	4b3b      	ldr	r3, [pc, #236]	@ (8001d98 <HAL_RCC_GetSysClockFreq+0x108>)
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	f003 0303 	and.w	r3, r3, #3
 8001cb0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d005      	beq.n	8001cc4 <HAL_RCC_GetSysClockFreq+0x34>
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	2b0c      	cmp	r3, #12
 8001cbc:	d121      	bne.n	8001d02 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d11e      	bne.n	8001d02 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001cc4:	4b34      	ldr	r3, [pc, #208]	@ (8001d98 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 0308 	and.w	r3, r3, #8
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d107      	bne.n	8001ce0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001cd0:	4b31      	ldr	r3, [pc, #196]	@ (8001d98 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001cd6:	0a1b      	lsrs	r3, r3, #8
 8001cd8:	f003 030f 	and.w	r3, r3, #15
 8001cdc:	61fb      	str	r3, [r7, #28]
 8001cde:	e005      	b.n	8001cec <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001ce0:	4b2d      	ldr	r3, [pc, #180]	@ (8001d98 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	091b      	lsrs	r3, r3, #4
 8001ce6:	f003 030f 	and.w	r3, r3, #15
 8001cea:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001cec:	4a2b      	ldr	r2, [pc, #172]	@ (8001d9c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cf4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d10d      	bne.n	8001d18 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001cfc:	69fb      	ldr	r3, [r7, #28]
 8001cfe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d00:	e00a      	b.n	8001d18 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	2b04      	cmp	r3, #4
 8001d06:	d102      	bne.n	8001d0e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001d08:	4b25      	ldr	r3, [pc, #148]	@ (8001da0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001d0a:	61bb      	str	r3, [r7, #24]
 8001d0c:	e004      	b.n	8001d18 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	2b08      	cmp	r3, #8
 8001d12:	d101      	bne.n	8001d18 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001d14:	4b23      	ldr	r3, [pc, #140]	@ (8001da4 <HAL_RCC_GetSysClockFreq+0x114>)
 8001d16:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	2b0c      	cmp	r3, #12
 8001d1c:	d134      	bne.n	8001d88 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d1e:	4b1e      	ldr	r3, [pc, #120]	@ (8001d98 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d20:	68db      	ldr	r3, [r3, #12]
 8001d22:	f003 0303 	and.w	r3, r3, #3
 8001d26:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	d003      	beq.n	8001d36 <HAL_RCC_GetSysClockFreq+0xa6>
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	2b03      	cmp	r3, #3
 8001d32:	d003      	beq.n	8001d3c <HAL_RCC_GetSysClockFreq+0xac>
 8001d34:	e005      	b.n	8001d42 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001d36:	4b1a      	ldr	r3, [pc, #104]	@ (8001da0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001d38:	617b      	str	r3, [r7, #20]
      break;
 8001d3a:	e005      	b.n	8001d48 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001d3c:	4b19      	ldr	r3, [pc, #100]	@ (8001da4 <HAL_RCC_GetSysClockFreq+0x114>)
 8001d3e:	617b      	str	r3, [r7, #20]
      break;
 8001d40:	e002      	b.n	8001d48 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	617b      	str	r3, [r7, #20]
      break;
 8001d46:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d48:	4b13      	ldr	r3, [pc, #76]	@ (8001d98 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	091b      	lsrs	r3, r3, #4
 8001d4e:	f003 0307 	and.w	r3, r3, #7
 8001d52:	3301      	adds	r3, #1
 8001d54:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001d56:	4b10      	ldr	r3, [pc, #64]	@ (8001d98 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d58:	68db      	ldr	r3, [r3, #12]
 8001d5a:	0a1b      	lsrs	r3, r3, #8
 8001d5c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001d60:	697a      	ldr	r2, [r7, #20]
 8001d62:	fb03 f202 	mul.w	r2, r3, r2
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d6c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d6e:	4b0a      	ldr	r3, [pc, #40]	@ (8001d98 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d70:	68db      	ldr	r3, [r3, #12]
 8001d72:	0e5b      	lsrs	r3, r3, #25
 8001d74:	f003 0303 	and.w	r3, r3, #3
 8001d78:	3301      	adds	r3, #1
 8001d7a:	005b      	lsls	r3, r3, #1
 8001d7c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001d7e:	697a      	ldr	r2, [r7, #20]
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d86:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001d88:	69bb      	ldr	r3, [r7, #24]
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3724      	adds	r7, #36	@ 0x24
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	40021000 	.word	0x40021000
 8001d9c:	08003718 	.word	0x08003718
 8001da0:	00f42400 	.word	0x00f42400
 8001da4:	007a1200 	.word	0x007a1200

08001da8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001dac:	4b03      	ldr	r3, [pc, #12]	@ (8001dbc <HAL_RCC_GetHCLKFreq+0x14>)
 8001dae:	681b      	ldr	r3, [r3, #0]
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr
 8001dba:	bf00      	nop
 8001dbc:	20000000 	.word	0x20000000

08001dc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001dc4:	f7ff fff0 	bl	8001da8 <HAL_RCC_GetHCLKFreq>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	4b06      	ldr	r3, [pc, #24]	@ (8001de4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	0a1b      	lsrs	r3, r3, #8
 8001dd0:	f003 0307 	and.w	r3, r3, #7
 8001dd4:	4904      	ldr	r1, [pc, #16]	@ (8001de8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001dd6:	5ccb      	ldrb	r3, [r1, r3]
 8001dd8:	f003 031f 	and.w	r3, r3, #31
 8001ddc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	40021000 	.word	0x40021000
 8001de8:	08003710 	.word	0x08003710

08001dec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001df0:	f7ff ffda 	bl	8001da8 <HAL_RCC_GetHCLKFreq>
 8001df4:	4602      	mov	r2, r0
 8001df6:	4b06      	ldr	r3, [pc, #24]	@ (8001e10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	0adb      	lsrs	r3, r3, #11
 8001dfc:	f003 0307 	and.w	r3, r3, #7
 8001e00:	4904      	ldr	r1, [pc, #16]	@ (8001e14 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001e02:	5ccb      	ldrb	r3, [r1, r3]
 8001e04:	f003 031f 	and.w	r3, r3, #31
 8001e08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	40021000 	.word	0x40021000
 8001e14:	08003710 	.word	0x08003710

08001e18 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b086      	sub	sp, #24
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001e20:	2300      	movs	r3, #0
 8001e22:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001e24:	4b2a      	ldr	r3, [pc, #168]	@ (8001ed0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d003      	beq.n	8001e38 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001e30:	f7ff f9ee 	bl	8001210 <HAL_PWREx_GetVoltageRange>
 8001e34:	6178      	str	r0, [r7, #20]
 8001e36:	e014      	b.n	8001e62 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e38:	4b25      	ldr	r3, [pc, #148]	@ (8001ed0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e3c:	4a24      	ldr	r2, [pc, #144]	@ (8001ed0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e3e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e42:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e44:	4b22      	ldr	r3, [pc, #136]	@ (8001ed0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e4c:	60fb      	str	r3, [r7, #12]
 8001e4e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001e50:	f7ff f9de 	bl	8001210 <HAL_PWREx_GetVoltageRange>
 8001e54:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001e56:	4b1e      	ldr	r3, [pc, #120]	@ (8001ed0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e5a:	4a1d      	ldr	r2, [pc, #116]	@ (8001ed0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e5c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e60:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001e68:	d10b      	bne.n	8001e82 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2b80      	cmp	r3, #128	@ 0x80
 8001e6e:	d919      	bls.n	8001ea4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2ba0      	cmp	r3, #160	@ 0xa0
 8001e74:	d902      	bls.n	8001e7c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e76:	2302      	movs	r3, #2
 8001e78:	613b      	str	r3, [r7, #16]
 8001e7a:	e013      	b.n	8001ea4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	613b      	str	r3, [r7, #16]
 8001e80:	e010      	b.n	8001ea4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2b80      	cmp	r3, #128	@ 0x80
 8001e86:	d902      	bls.n	8001e8e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001e88:	2303      	movs	r3, #3
 8001e8a:	613b      	str	r3, [r7, #16]
 8001e8c:	e00a      	b.n	8001ea4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2b80      	cmp	r3, #128	@ 0x80
 8001e92:	d102      	bne.n	8001e9a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e94:	2302      	movs	r3, #2
 8001e96:	613b      	str	r3, [r7, #16]
 8001e98:	e004      	b.n	8001ea4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2b70      	cmp	r3, #112	@ 0x70
 8001e9e:	d101      	bne.n	8001ea4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001ea4:	4b0b      	ldr	r3, [pc, #44]	@ (8001ed4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f023 0207 	bic.w	r2, r3, #7
 8001eac:	4909      	ldr	r1, [pc, #36]	@ (8001ed4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001eb4:	4b07      	ldr	r3, [pc, #28]	@ (8001ed4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 0307 	and.w	r3, r3, #7
 8001ebc:	693a      	ldr	r2, [r7, #16]
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	d001      	beq.n	8001ec6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e000      	b.n	8001ec8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001ec6:	2300      	movs	r3, #0
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3718      	adds	r7, #24
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	40021000 	.word	0x40021000
 8001ed4:	40022000 	.word	0x40022000

08001ed8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b086      	sub	sp, #24
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d041      	beq.n	8001f78 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001ef8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001efc:	d02a      	beq.n	8001f54 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001efe:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001f02:	d824      	bhi.n	8001f4e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001f04:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001f08:	d008      	beq.n	8001f1c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001f0a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001f0e:	d81e      	bhi.n	8001f4e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d00a      	beq.n	8001f2a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001f14:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001f18:	d010      	beq.n	8001f3c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001f1a:	e018      	b.n	8001f4e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001f1c:	4b86      	ldr	r3, [pc, #536]	@ (8002138 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	4a85      	ldr	r2, [pc, #532]	@ (8002138 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f22:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f26:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f28:	e015      	b.n	8001f56 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	3304      	adds	r3, #4
 8001f2e:	2100      	movs	r1, #0
 8001f30:	4618      	mov	r0, r3
 8001f32:	f000 facb 	bl	80024cc <RCCEx_PLLSAI1_Config>
 8001f36:	4603      	mov	r3, r0
 8001f38:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f3a:	e00c      	b.n	8001f56 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	3320      	adds	r3, #32
 8001f40:	2100      	movs	r1, #0
 8001f42:	4618      	mov	r0, r3
 8001f44:	f000 fbb6 	bl	80026b4 <RCCEx_PLLSAI2_Config>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f4c:	e003      	b.n	8001f56 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	74fb      	strb	r3, [r7, #19]
      break;
 8001f52:	e000      	b.n	8001f56 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001f54:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001f56:	7cfb      	ldrb	r3, [r7, #19]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d10b      	bne.n	8001f74 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001f5c:	4b76      	ldr	r3, [pc, #472]	@ (8002138 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f62:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001f6a:	4973      	ldr	r1, [pc, #460]	@ (8002138 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001f72:	e001      	b.n	8001f78 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f74:	7cfb      	ldrb	r3, [r7, #19]
 8001f76:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d041      	beq.n	8002008 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001f88:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001f8c:	d02a      	beq.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001f8e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001f92:	d824      	bhi.n	8001fde <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001f94:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001f98:	d008      	beq.n	8001fac <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001f9a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001f9e:	d81e      	bhi.n	8001fde <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d00a      	beq.n	8001fba <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001fa4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001fa8:	d010      	beq.n	8001fcc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001faa:	e018      	b.n	8001fde <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001fac:	4b62      	ldr	r3, [pc, #392]	@ (8002138 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	4a61      	ldr	r2, [pc, #388]	@ (8002138 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fb2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fb6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001fb8:	e015      	b.n	8001fe6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	3304      	adds	r3, #4
 8001fbe:	2100      	movs	r1, #0
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f000 fa83 	bl	80024cc <RCCEx_PLLSAI1_Config>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001fca:	e00c      	b.n	8001fe6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	3320      	adds	r3, #32
 8001fd0:	2100      	movs	r1, #0
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f000 fb6e 	bl	80026b4 <RCCEx_PLLSAI2_Config>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001fdc:	e003      	b.n	8001fe6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	74fb      	strb	r3, [r7, #19]
      break;
 8001fe2:	e000      	b.n	8001fe6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001fe4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001fe6:	7cfb      	ldrb	r3, [r7, #19]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d10b      	bne.n	8002004 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001fec:	4b52      	ldr	r3, [pc, #328]	@ (8002138 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ff2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001ffa:	494f      	ldr	r1, [pc, #316]	@ (8002138 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002002:	e001      	b.n	8002008 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002004:	7cfb      	ldrb	r3, [r7, #19]
 8002006:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002010:	2b00      	cmp	r3, #0
 8002012:	f000 80a0 	beq.w	8002156 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002016:	2300      	movs	r3, #0
 8002018:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800201a:	4b47      	ldr	r3, [pc, #284]	@ (8002138 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800201c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800201e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002022:	2b00      	cmp	r3, #0
 8002024:	d101      	bne.n	800202a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002026:	2301      	movs	r3, #1
 8002028:	e000      	b.n	800202c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800202a:	2300      	movs	r3, #0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d00d      	beq.n	800204c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002030:	4b41      	ldr	r3, [pc, #260]	@ (8002138 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002032:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002034:	4a40      	ldr	r2, [pc, #256]	@ (8002138 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002036:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800203a:	6593      	str	r3, [r2, #88]	@ 0x58
 800203c:	4b3e      	ldr	r3, [pc, #248]	@ (8002138 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800203e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002040:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002044:	60bb      	str	r3, [r7, #8]
 8002046:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002048:	2301      	movs	r3, #1
 800204a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800204c:	4b3b      	ldr	r3, [pc, #236]	@ (800213c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a3a      	ldr	r2, [pc, #232]	@ (800213c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002052:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002056:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002058:	f7fe fdfe 	bl	8000c58 <HAL_GetTick>
 800205c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800205e:	e009      	b.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002060:	f7fe fdfa 	bl	8000c58 <HAL_GetTick>
 8002064:	4602      	mov	r2, r0
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	2b02      	cmp	r3, #2
 800206c:	d902      	bls.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800206e:	2303      	movs	r3, #3
 8002070:	74fb      	strb	r3, [r7, #19]
        break;
 8002072:	e005      	b.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002074:	4b31      	ldr	r3, [pc, #196]	@ (800213c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800207c:	2b00      	cmp	r3, #0
 800207e:	d0ef      	beq.n	8002060 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002080:	7cfb      	ldrb	r3, [r7, #19]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d15c      	bne.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002086:	4b2c      	ldr	r3, [pc, #176]	@ (8002138 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002088:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800208c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002090:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d01f      	beq.n	80020d8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800209e:	697a      	ldr	r2, [r7, #20]
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d019      	beq.n	80020d8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80020a4:	4b24      	ldr	r3, [pc, #144]	@ (8002138 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80020ae:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80020b0:	4b21      	ldr	r3, [pc, #132]	@ (8002138 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020b6:	4a20      	ldr	r2, [pc, #128]	@ (8002138 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80020c0:	4b1d      	ldr	r3, [pc, #116]	@ (8002138 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020c6:	4a1c      	ldr	r2, [pc, #112]	@ (8002138 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80020d0:	4a19      	ldr	r2, [pc, #100]	@ (8002138 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	f003 0301 	and.w	r3, r3, #1
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d016      	beq.n	8002110 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020e2:	f7fe fdb9 	bl	8000c58 <HAL_GetTick>
 80020e6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020e8:	e00b      	b.n	8002102 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020ea:	f7fe fdb5 	bl	8000c58 <HAL_GetTick>
 80020ee:	4602      	mov	r2, r0
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	1ad3      	subs	r3, r2, r3
 80020f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d902      	bls.n	8002102 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80020fc:	2303      	movs	r3, #3
 80020fe:	74fb      	strb	r3, [r7, #19]
            break;
 8002100:	e006      	b.n	8002110 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002102:	4b0d      	ldr	r3, [pc, #52]	@ (8002138 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002104:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002108:	f003 0302 	and.w	r3, r3, #2
 800210c:	2b00      	cmp	r3, #0
 800210e:	d0ec      	beq.n	80020ea <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002110:	7cfb      	ldrb	r3, [r7, #19]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d10c      	bne.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002116:	4b08      	ldr	r3, [pc, #32]	@ (8002138 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002118:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800211c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002126:	4904      	ldr	r1, [pc, #16]	@ (8002138 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002128:	4313      	orrs	r3, r2
 800212a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800212e:	e009      	b.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002130:	7cfb      	ldrb	r3, [r7, #19]
 8002132:	74bb      	strb	r3, [r7, #18]
 8002134:	e006      	b.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002136:	bf00      	nop
 8002138:	40021000 	.word	0x40021000
 800213c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002140:	7cfb      	ldrb	r3, [r7, #19]
 8002142:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002144:	7c7b      	ldrb	r3, [r7, #17]
 8002146:	2b01      	cmp	r3, #1
 8002148:	d105      	bne.n	8002156 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800214a:	4b9e      	ldr	r3, [pc, #632]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800214c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800214e:	4a9d      	ldr	r2, [pc, #628]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002150:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002154:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 0301 	and.w	r3, r3, #1
 800215e:	2b00      	cmp	r3, #0
 8002160:	d00a      	beq.n	8002178 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002162:	4b98      	ldr	r3, [pc, #608]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002164:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002168:	f023 0203 	bic.w	r2, r3, #3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002170:	4994      	ldr	r1, [pc, #592]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002172:	4313      	orrs	r3, r2
 8002174:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 0302 	and.w	r3, r3, #2
 8002180:	2b00      	cmp	r3, #0
 8002182:	d00a      	beq.n	800219a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002184:	4b8f      	ldr	r3, [pc, #572]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002186:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800218a:	f023 020c 	bic.w	r2, r3, #12
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002192:	498c      	ldr	r1, [pc, #560]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002194:	4313      	orrs	r3, r2
 8002196:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0304 	and.w	r3, r3, #4
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d00a      	beq.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80021a6:	4b87      	ldr	r3, [pc, #540]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021ac:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021b4:	4983      	ldr	r1, [pc, #524]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021b6:	4313      	orrs	r3, r2
 80021b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 0308 	and.w	r3, r3, #8
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d00a      	beq.n	80021de <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80021c8:	4b7e      	ldr	r3, [pc, #504]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021ce:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021d6:	497b      	ldr	r1, [pc, #492]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021d8:	4313      	orrs	r3, r2
 80021da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0310 	and.w	r3, r3, #16
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d00a      	beq.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80021ea:	4b76      	ldr	r3, [pc, #472]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021f0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021f8:	4972      	ldr	r1, [pc, #456]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021fa:	4313      	orrs	r3, r2
 80021fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 0320 	and.w	r3, r3, #32
 8002208:	2b00      	cmp	r3, #0
 800220a:	d00a      	beq.n	8002222 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800220c:	4b6d      	ldr	r3, [pc, #436]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800220e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002212:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800221a:	496a      	ldr	r1, [pc, #424]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800221c:	4313      	orrs	r3, r2
 800221e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800222a:	2b00      	cmp	r3, #0
 800222c:	d00a      	beq.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800222e:	4b65      	ldr	r3, [pc, #404]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002230:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002234:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800223c:	4961      	ldr	r1, [pc, #388]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800223e:	4313      	orrs	r3, r2
 8002240:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800224c:	2b00      	cmp	r3, #0
 800224e:	d00a      	beq.n	8002266 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002250:	4b5c      	ldr	r3, [pc, #368]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002252:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002256:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800225e:	4959      	ldr	r1, [pc, #356]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002260:	4313      	orrs	r3, r2
 8002262:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800226e:	2b00      	cmp	r3, #0
 8002270:	d00a      	beq.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002272:	4b54      	ldr	r3, [pc, #336]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002274:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002278:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002280:	4950      	ldr	r1, [pc, #320]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002282:	4313      	orrs	r3, r2
 8002284:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002290:	2b00      	cmp	r3, #0
 8002292:	d00a      	beq.n	80022aa <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002294:	4b4b      	ldr	r3, [pc, #300]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002296:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800229a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022a2:	4948      	ldr	r1, [pc, #288]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022a4:	4313      	orrs	r3, r2
 80022a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d00a      	beq.n	80022cc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80022b6:	4b43      	ldr	r3, [pc, #268]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022bc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022c4:	493f      	ldr	r1, [pc, #252]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022c6:	4313      	orrs	r3, r2
 80022c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d028      	beq.n	800232a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80022d8:	4b3a      	ldr	r3, [pc, #232]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022de:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80022e6:	4937      	ldr	r1, [pc, #220]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022e8:	4313      	orrs	r3, r2
 80022ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80022f2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80022f6:	d106      	bne.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022f8:	4b32      	ldr	r3, [pc, #200]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	4a31      	ldr	r2, [pc, #196]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002302:	60d3      	str	r3, [r2, #12]
 8002304:	e011      	b.n	800232a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800230a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800230e:	d10c      	bne.n	800232a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	3304      	adds	r3, #4
 8002314:	2101      	movs	r1, #1
 8002316:	4618      	mov	r0, r3
 8002318:	f000 f8d8 	bl	80024cc <RCCEx_PLLSAI1_Config>
 800231c:	4603      	mov	r3, r0
 800231e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002320:	7cfb      	ldrb	r3, [r7, #19]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d001      	beq.n	800232a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002326:	7cfb      	ldrb	r3, [r7, #19]
 8002328:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d028      	beq.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002336:	4b23      	ldr	r3, [pc, #140]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002338:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800233c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002344:	491f      	ldr	r1, [pc, #124]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002346:	4313      	orrs	r3, r2
 8002348:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002350:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002354:	d106      	bne.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002356:	4b1b      	ldr	r3, [pc, #108]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002358:	68db      	ldr	r3, [r3, #12]
 800235a:	4a1a      	ldr	r2, [pc, #104]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800235c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002360:	60d3      	str	r3, [r2, #12]
 8002362:	e011      	b.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002368:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800236c:	d10c      	bne.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	3304      	adds	r3, #4
 8002372:	2101      	movs	r1, #1
 8002374:	4618      	mov	r0, r3
 8002376:	f000 f8a9 	bl	80024cc <RCCEx_PLLSAI1_Config>
 800237a:	4603      	mov	r3, r0
 800237c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800237e:	7cfb      	ldrb	r3, [r7, #19]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d001      	beq.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002384:	7cfb      	ldrb	r3, [r7, #19]
 8002386:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002390:	2b00      	cmp	r3, #0
 8002392:	d02b      	beq.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002394:	4b0b      	ldr	r3, [pc, #44]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002396:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800239a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023a2:	4908      	ldr	r1, [pc, #32]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023a4:	4313      	orrs	r3, r2
 80023a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023ae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80023b2:	d109      	bne.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023b4:	4b03      	ldr	r3, [pc, #12]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	4a02      	ldr	r2, [pc, #8]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80023be:	60d3      	str	r3, [r2, #12]
 80023c0:	e014      	b.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x514>
 80023c2:	bf00      	nop
 80023c4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023cc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80023d0:	d10c      	bne.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	3304      	adds	r3, #4
 80023d6:	2101      	movs	r1, #1
 80023d8:	4618      	mov	r0, r3
 80023da:	f000 f877 	bl	80024cc <RCCEx_PLLSAI1_Config>
 80023de:	4603      	mov	r3, r0
 80023e0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80023e2:	7cfb      	ldrb	r3, [r7, #19]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d001      	beq.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80023e8:	7cfb      	ldrb	r3, [r7, #19]
 80023ea:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d02f      	beq.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80023f8:	4b2b      	ldr	r3, [pc, #172]	@ (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80023fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023fe:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002406:	4928      	ldr	r1, [pc, #160]	@ (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002408:	4313      	orrs	r3, r2
 800240a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002412:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002416:	d10d      	bne.n	8002434 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	3304      	adds	r3, #4
 800241c:	2102      	movs	r1, #2
 800241e:	4618      	mov	r0, r3
 8002420:	f000 f854 	bl	80024cc <RCCEx_PLLSAI1_Config>
 8002424:	4603      	mov	r3, r0
 8002426:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002428:	7cfb      	ldrb	r3, [r7, #19]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d014      	beq.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800242e:	7cfb      	ldrb	r3, [r7, #19]
 8002430:	74bb      	strb	r3, [r7, #18]
 8002432:	e011      	b.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002438:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800243c:	d10c      	bne.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	3320      	adds	r3, #32
 8002442:	2102      	movs	r1, #2
 8002444:	4618      	mov	r0, r3
 8002446:	f000 f935 	bl	80026b4 <RCCEx_PLLSAI2_Config>
 800244a:	4603      	mov	r3, r0
 800244c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800244e:	7cfb      	ldrb	r3, [r7, #19]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d001      	beq.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002454:	7cfb      	ldrb	r3, [r7, #19]
 8002456:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002460:	2b00      	cmp	r3, #0
 8002462:	d00a      	beq.n	800247a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002464:	4b10      	ldr	r3, [pc, #64]	@ (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002466:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800246a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002472:	490d      	ldr	r1, [pc, #52]	@ (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002474:	4313      	orrs	r3, r2
 8002476:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d00b      	beq.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002486:	4b08      	ldr	r3, [pc, #32]	@ (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002488:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800248c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002496:	4904      	ldr	r1, [pc, #16]	@ (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002498:	4313      	orrs	r3, r2
 800249a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800249e:	7cbb      	ldrb	r3, [r7, #18]
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3718      	adds	r7, #24
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	40021000 	.word	0x40021000

080024ac <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80024b0:	4b05      	ldr	r3, [pc, #20]	@ (80024c8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a04      	ldr	r2, [pc, #16]	@ (80024c8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80024b6:	f043 0304 	orr.w	r3, r3, #4
 80024ba:	6013      	str	r3, [r2, #0]
}
 80024bc:	bf00      	nop
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr
 80024c6:	bf00      	nop
 80024c8:	40021000 	.word	0x40021000

080024cc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b084      	sub	sp, #16
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
 80024d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80024d6:	2300      	movs	r3, #0
 80024d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80024da:	4b75      	ldr	r3, [pc, #468]	@ (80026b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024dc:	68db      	ldr	r3, [r3, #12]
 80024de:	f003 0303 	and.w	r3, r3, #3
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d018      	beq.n	8002518 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80024e6:	4b72      	ldr	r3, [pc, #456]	@ (80026b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024e8:	68db      	ldr	r3, [r3, #12]
 80024ea:	f003 0203 	and.w	r2, r3, #3
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d10d      	bne.n	8002512 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
       ||
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d009      	beq.n	8002512 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80024fe:	4b6c      	ldr	r3, [pc, #432]	@ (80026b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002500:	68db      	ldr	r3, [r3, #12]
 8002502:	091b      	lsrs	r3, r3, #4
 8002504:	f003 0307 	and.w	r3, r3, #7
 8002508:	1c5a      	adds	r2, r3, #1
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	685b      	ldr	r3, [r3, #4]
       ||
 800250e:	429a      	cmp	r2, r3
 8002510:	d047      	beq.n	80025a2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	73fb      	strb	r3, [r7, #15]
 8002516:	e044      	b.n	80025a2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	2b03      	cmp	r3, #3
 800251e:	d018      	beq.n	8002552 <RCCEx_PLLSAI1_Config+0x86>
 8002520:	2b03      	cmp	r3, #3
 8002522:	d825      	bhi.n	8002570 <RCCEx_PLLSAI1_Config+0xa4>
 8002524:	2b01      	cmp	r3, #1
 8002526:	d002      	beq.n	800252e <RCCEx_PLLSAI1_Config+0x62>
 8002528:	2b02      	cmp	r3, #2
 800252a:	d009      	beq.n	8002540 <RCCEx_PLLSAI1_Config+0x74>
 800252c:	e020      	b.n	8002570 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800252e:	4b60      	ldr	r3, [pc, #384]	@ (80026b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0302 	and.w	r3, r3, #2
 8002536:	2b00      	cmp	r3, #0
 8002538:	d11d      	bne.n	8002576 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800253e:	e01a      	b.n	8002576 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002540:	4b5b      	ldr	r3, [pc, #364]	@ (80026b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002548:	2b00      	cmp	r3, #0
 800254a:	d116      	bne.n	800257a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002550:	e013      	b.n	800257a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002552:	4b57      	ldr	r3, [pc, #348]	@ (80026b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d10f      	bne.n	800257e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800255e:	4b54      	ldr	r3, [pc, #336]	@ (80026b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d109      	bne.n	800257e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800256e:	e006      	b.n	800257e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	73fb      	strb	r3, [r7, #15]
      break;
 8002574:	e004      	b.n	8002580 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002576:	bf00      	nop
 8002578:	e002      	b.n	8002580 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800257a:	bf00      	nop
 800257c:	e000      	b.n	8002580 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800257e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002580:	7bfb      	ldrb	r3, [r7, #15]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d10d      	bne.n	80025a2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002586:	4b4a      	ldr	r3, [pc, #296]	@ (80026b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002588:	68db      	ldr	r3, [r3, #12]
 800258a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6819      	ldr	r1, [r3, #0]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	3b01      	subs	r3, #1
 8002598:	011b      	lsls	r3, r3, #4
 800259a:	430b      	orrs	r3, r1
 800259c:	4944      	ldr	r1, [pc, #272]	@ (80026b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800259e:	4313      	orrs	r3, r2
 80025a0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80025a2:	7bfb      	ldrb	r3, [r7, #15]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d17d      	bne.n	80026a4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80025a8:	4b41      	ldr	r3, [pc, #260]	@ (80026b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a40      	ldr	r2, [pc, #256]	@ (80026b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025ae:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80025b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025b4:	f7fe fb50 	bl	8000c58 <HAL_GetTick>
 80025b8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80025ba:	e009      	b.n	80025d0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80025bc:	f7fe fb4c 	bl	8000c58 <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	d902      	bls.n	80025d0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80025ca:	2303      	movs	r3, #3
 80025cc:	73fb      	strb	r3, [r7, #15]
        break;
 80025ce:	e005      	b.n	80025dc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80025d0:	4b37      	ldr	r3, [pc, #220]	@ (80026b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d1ef      	bne.n	80025bc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80025dc:	7bfb      	ldrb	r3, [r7, #15]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d160      	bne.n	80026a4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d111      	bne.n	800260c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80025e8:	4b31      	ldr	r3, [pc, #196]	@ (80026b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025ea:	691b      	ldr	r3, [r3, #16]
 80025ec:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80025f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80025f4:	687a      	ldr	r2, [r7, #4]
 80025f6:	6892      	ldr	r2, [r2, #8]
 80025f8:	0211      	lsls	r1, r2, #8
 80025fa:	687a      	ldr	r2, [r7, #4]
 80025fc:	68d2      	ldr	r2, [r2, #12]
 80025fe:	0912      	lsrs	r2, r2, #4
 8002600:	0452      	lsls	r2, r2, #17
 8002602:	430a      	orrs	r2, r1
 8002604:	492a      	ldr	r1, [pc, #168]	@ (80026b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002606:	4313      	orrs	r3, r2
 8002608:	610b      	str	r3, [r1, #16]
 800260a:	e027      	b.n	800265c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	2b01      	cmp	r3, #1
 8002610:	d112      	bne.n	8002638 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002612:	4b27      	ldr	r3, [pc, #156]	@ (80026b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002614:	691b      	ldr	r3, [r3, #16]
 8002616:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800261a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	6892      	ldr	r2, [r2, #8]
 8002622:	0211      	lsls	r1, r2, #8
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	6912      	ldr	r2, [r2, #16]
 8002628:	0852      	lsrs	r2, r2, #1
 800262a:	3a01      	subs	r2, #1
 800262c:	0552      	lsls	r2, r2, #21
 800262e:	430a      	orrs	r2, r1
 8002630:	491f      	ldr	r1, [pc, #124]	@ (80026b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002632:	4313      	orrs	r3, r2
 8002634:	610b      	str	r3, [r1, #16]
 8002636:	e011      	b.n	800265c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002638:	4b1d      	ldr	r3, [pc, #116]	@ (80026b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800263a:	691b      	ldr	r3, [r3, #16]
 800263c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002640:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	6892      	ldr	r2, [r2, #8]
 8002648:	0211      	lsls	r1, r2, #8
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	6952      	ldr	r2, [r2, #20]
 800264e:	0852      	lsrs	r2, r2, #1
 8002650:	3a01      	subs	r2, #1
 8002652:	0652      	lsls	r2, r2, #25
 8002654:	430a      	orrs	r2, r1
 8002656:	4916      	ldr	r1, [pc, #88]	@ (80026b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002658:	4313      	orrs	r3, r2
 800265a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800265c:	4b14      	ldr	r3, [pc, #80]	@ (80026b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a13      	ldr	r2, [pc, #76]	@ (80026b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002662:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002666:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002668:	f7fe faf6 	bl	8000c58 <HAL_GetTick>
 800266c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800266e:	e009      	b.n	8002684 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002670:	f7fe faf2 	bl	8000c58 <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	2b02      	cmp	r3, #2
 800267c:	d902      	bls.n	8002684 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	73fb      	strb	r3, [r7, #15]
          break;
 8002682:	e005      	b.n	8002690 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002684:	4b0a      	ldr	r3, [pc, #40]	@ (80026b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800268c:	2b00      	cmp	r3, #0
 800268e:	d0ef      	beq.n	8002670 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002690:	7bfb      	ldrb	r3, [r7, #15]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d106      	bne.n	80026a4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002696:	4b06      	ldr	r3, [pc, #24]	@ (80026b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002698:	691a      	ldr	r2, [r3, #16]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	699b      	ldr	r3, [r3, #24]
 800269e:	4904      	ldr	r1, [pc, #16]	@ (80026b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026a0:	4313      	orrs	r3, r2
 80026a2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80026a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3710      	adds	r7, #16
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	40021000 	.word	0x40021000

080026b4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b084      	sub	sp, #16
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
 80026bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80026be:	2300      	movs	r3, #0
 80026c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80026c2:	4b6a      	ldr	r3, [pc, #424]	@ (800286c <RCCEx_PLLSAI2_Config+0x1b8>)
 80026c4:	68db      	ldr	r3, [r3, #12]
 80026c6:	f003 0303 	and.w	r3, r3, #3
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d018      	beq.n	8002700 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80026ce:	4b67      	ldr	r3, [pc, #412]	@ (800286c <RCCEx_PLLSAI2_Config+0x1b8>)
 80026d0:	68db      	ldr	r3, [r3, #12]
 80026d2:	f003 0203 	and.w	r2, r3, #3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	429a      	cmp	r2, r3
 80026dc:	d10d      	bne.n	80026fa <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
       ||
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d009      	beq.n	80026fa <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80026e6:	4b61      	ldr	r3, [pc, #388]	@ (800286c <RCCEx_PLLSAI2_Config+0x1b8>)
 80026e8:	68db      	ldr	r3, [r3, #12]
 80026ea:	091b      	lsrs	r3, r3, #4
 80026ec:	f003 0307 	and.w	r3, r3, #7
 80026f0:	1c5a      	adds	r2, r3, #1
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	685b      	ldr	r3, [r3, #4]
       ||
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d047      	beq.n	800278a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	73fb      	strb	r3, [r7, #15]
 80026fe:	e044      	b.n	800278a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	2b03      	cmp	r3, #3
 8002706:	d018      	beq.n	800273a <RCCEx_PLLSAI2_Config+0x86>
 8002708:	2b03      	cmp	r3, #3
 800270a:	d825      	bhi.n	8002758 <RCCEx_PLLSAI2_Config+0xa4>
 800270c:	2b01      	cmp	r3, #1
 800270e:	d002      	beq.n	8002716 <RCCEx_PLLSAI2_Config+0x62>
 8002710:	2b02      	cmp	r3, #2
 8002712:	d009      	beq.n	8002728 <RCCEx_PLLSAI2_Config+0x74>
 8002714:	e020      	b.n	8002758 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002716:	4b55      	ldr	r3, [pc, #340]	@ (800286c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 0302 	and.w	r3, r3, #2
 800271e:	2b00      	cmp	r3, #0
 8002720:	d11d      	bne.n	800275e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002726:	e01a      	b.n	800275e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002728:	4b50      	ldr	r3, [pc, #320]	@ (800286c <RCCEx_PLLSAI2_Config+0x1b8>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002730:	2b00      	cmp	r3, #0
 8002732:	d116      	bne.n	8002762 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002738:	e013      	b.n	8002762 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800273a:	4b4c      	ldr	r3, [pc, #304]	@ (800286c <RCCEx_PLLSAI2_Config+0x1b8>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d10f      	bne.n	8002766 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002746:	4b49      	ldr	r3, [pc, #292]	@ (800286c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d109      	bne.n	8002766 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002756:	e006      	b.n	8002766 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	73fb      	strb	r3, [r7, #15]
      break;
 800275c:	e004      	b.n	8002768 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800275e:	bf00      	nop
 8002760:	e002      	b.n	8002768 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002762:	bf00      	nop
 8002764:	e000      	b.n	8002768 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002766:	bf00      	nop
    }

    if(status == HAL_OK)
 8002768:	7bfb      	ldrb	r3, [r7, #15]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d10d      	bne.n	800278a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800276e:	4b3f      	ldr	r3, [pc, #252]	@ (800286c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002770:	68db      	ldr	r3, [r3, #12]
 8002772:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6819      	ldr	r1, [r3, #0]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	3b01      	subs	r3, #1
 8002780:	011b      	lsls	r3, r3, #4
 8002782:	430b      	orrs	r3, r1
 8002784:	4939      	ldr	r1, [pc, #228]	@ (800286c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002786:	4313      	orrs	r3, r2
 8002788:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800278a:	7bfb      	ldrb	r3, [r7, #15]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d167      	bne.n	8002860 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002790:	4b36      	ldr	r3, [pc, #216]	@ (800286c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a35      	ldr	r2, [pc, #212]	@ (800286c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002796:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800279a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800279c:	f7fe fa5c 	bl	8000c58 <HAL_GetTick>
 80027a0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80027a2:	e009      	b.n	80027b8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80027a4:	f7fe fa58 	bl	8000c58 <HAL_GetTick>
 80027a8:	4602      	mov	r2, r0
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d902      	bls.n	80027b8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	73fb      	strb	r3, [r7, #15]
        break;
 80027b6:	e005      	b.n	80027c4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80027b8:	4b2c      	ldr	r3, [pc, #176]	@ (800286c <RCCEx_PLLSAI2_Config+0x1b8>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d1ef      	bne.n	80027a4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80027c4:	7bfb      	ldrb	r3, [r7, #15]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d14a      	bne.n	8002860 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d111      	bne.n	80027f4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80027d0:	4b26      	ldr	r3, [pc, #152]	@ (800286c <RCCEx_PLLSAI2_Config+0x1b8>)
 80027d2:	695b      	ldr	r3, [r3, #20]
 80027d4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80027d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80027dc:	687a      	ldr	r2, [r7, #4]
 80027de:	6892      	ldr	r2, [r2, #8]
 80027e0:	0211      	lsls	r1, r2, #8
 80027e2:	687a      	ldr	r2, [r7, #4]
 80027e4:	68d2      	ldr	r2, [r2, #12]
 80027e6:	0912      	lsrs	r2, r2, #4
 80027e8:	0452      	lsls	r2, r2, #17
 80027ea:	430a      	orrs	r2, r1
 80027ec:	491f      	ldr	r1, [pc, #124]	@ (800286c <RCCEx_PLLSAI2_Config+0x1b8>)
 80027ee:	4313      	orrs	r3, r2
 80027f0:	614b      	str	r3, [r1, #20]
 80027f2:	e011      	b.n	8002818 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80027f4:	4b1d      	ldr	r3, [pc, #116]	@ (800286c <RCCEx_PLLSAI2_Config+0x1b8>)
 80027f6:	695b      	ldr	r3, [r3, #20]
 80027f8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80027fc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002800:	687a      	ldr	r2, [r7, #4]
 8002802:	6892      	ldr	r2, [r2, #8]
 8002804:	0211      	lsls	r1, r2, #8
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	6912      	ldr	r2, [r2, #16]
 800280a:	0852      	lsrs	r2, r2, #1
 800280c:	3a01      	subs	r2, #1
 800280e:	0652      	lsls	r2, r2, #25
 8002810:	430a      	orrs	r2, r1
 8002812:	4916      	ldr	r1, [pc, #88]	@ (800286c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002814:	4313      	orrs	r3, r2
 8002816:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002818:	4b14      	ldr	r3, [pc, #80]	@ (800286c <RCCEx_PLLSAI2_Config+0x1b8>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a13      	ldr	r2, [pc, #76]	@ (800286c <RCCEx_PLLSAI2_Config+0x1b8>)
 800281e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002822:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002824:	f7fe fa18 	bl	8000c58 <HAL_GetTick>
 8002828:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800282a:	e009      	b.n	8002840 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800282c:	f7fe fa14 	bl	8000c58 <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	2b02      	cmp	r3, #2
 8002838:	d902      	bls.n	8002840 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	73fb      	strb	r3, [r7, #15]
          break;
 800283e:	e005      	b.n	800284c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002840:	4b0a      	ldr	r3, [pc, #40]	@ (800286c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002848:	2b00      	cmp	r3, #0
 800284a:	d0ef      	beq.n	800282c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800284c:	7bfb      	ldrb	r3, [r7, #15]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d106      	bne.n	8002860 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002852:	4b06      	ldr	r3, [pc, #24]	@ (800286c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002854:	695a      	ldr	r2, [r3, #20]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	695b      	ldr	r3, [r3, #20]
 800285a:	4904      	ldr	r1, [pc, #16]	@ (800286c <RCCEx_PLLSAI2_Config+0x1b8>)
 800285c:	4313      	orrs	r3, r2
 800285e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002860:	7bfb      	ldrb	r3, [r7, #15]
}
 8002862:	4618      	mov	r0, r3
 8002864:	3710      	adds	r7, #16
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	40021000 	.word	0x40021000

08002870 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d101      	bne.n	8002882 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e049      	b.n	8002916 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002888:	b2db      	uxtb	r3, r3
 800288a:	2b00      	cmp	r3, #0
 800288c:	d106      	bne.n	800289c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2200      	movs	r2, #0
 8002892:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f7fe f8a0 	bl	80009dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2202      	movs	r2, #2
 80028a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	3304      	adds	r3, #4
 80028ac:	4619      	mov	r1, r3
 80028ae:	4610      	mov	r0, r2
 80028b0:	f000 f89e 	bl	80029f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2201      	movs	r2, #1
 80028b8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2201      	movs	r2, #1
 80028c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2201      	movs	r2, #1
 80028c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2201      	movs	r2, #1
 80028d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2201      	movs	r2, #1
 80028d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2201      	movs	r2, #1
 80028e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2201      	movs	r2, #1
 80028e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2201      	movs	r2, #1
 80028f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2201      	movs	r2, #1
 80028f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2201      	movs	r2, #1
 8002900:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2201      	movs	r2, #1
 8002908:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2201      	movs	r2, #1
 8002910:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002914:	2300      	movs	r3, #0
}
 8002916:	4618      	mov	r0, r3
 8002918:	3708      	adds	r7, #8
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
	...

08002920 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002920:	b480      	push	{r7}
 8002922:	b085      	sub	sp, #20
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800292e:	b2db      	uxtb	r3, r3
 8002930:	2b01      	cmp	r3, #1
 8002932:	d001      	beq.n	8002938 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e047      	b.n	80029c8 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2202      	movs	r2, #2
 800293c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a23      	ldr	r2, [pc, #140]	@ (80029d4 <HAL_TIM_Base_Start+0xb4>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d01d      	beq.n	8002986 <HAL_TIM_Base_Start+0x66>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002952:	d018      	beq.n	8002986 <HAL_TIM_Base_Start+0x66>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a1f      	ldr	r2, [pc, #124]	@ (80029d8 <HAL_TIM_Base_Start+0xb8>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d013      	beq.n	8002986 <HAL_TIM_Base_Start+0x66>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a1e      	ldr	r2, [pc, #120]	@ (80029dc <HAL_TIM_Base_Start+0xbc>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d00e      	beq.n	8002986 <HAL_TIM_Base_Start+0x66>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a1c      	ldr	r2, [pc, #112]	@ (80029e0 <HAL_TIM_Base_Start+0xc0>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d009      	beq.n	8002986 <HAL_TIM_Base_Start+0x66>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a1b      	ldr	r2, [pc, #108]	@ (80029e4 <HAL_TIM_Base_Start+0xc4>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d004      	beq.n	8002986 <HAL_TIM_Base_Start+0x66>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a19      	ldr	r2, [pc, #100]	@ (80029e8 <HAL_TIM_Base_Start+0xc8>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d115      	bne.n	80029b2 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	689a      	ldr	r2, [r3, #8]
 800298c:	4b17      	ldr	r3, [pc, #92]	@ (80029ec <HAL_TIM_Base_Start+0xcc>)
 800298e:	4013      	ands	r3, r2
 8002990:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2b06      	cmp	r3, #6
 8002996:	d015      	beq.n	80029c4 <HAL_TIM_Base_Start+0xa4>
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800299e:	d011      	beq.n	80029c4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f042 0201 	orr.w	r2, r2, #1
 80029ae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029b0:	e008      	b.n	80029c4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f042 0201 	orr.w	r2, r2, #1
 80029c0:	601a      	str	r2, [r3, #0]
 80029c2:	e000      	b.n	80029c6 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029c4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80029c6:	2300      	movs	r3, #0
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3714      	adds	r7, #20
 80029cc:	46bd      	mov	sp, r7
 80029ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d2:	4770      	bx	lr
 80029d4:	40012c00 	.word	0x40012c00
 80029d8:	40000400 	.word	0x40000400
 80029dc:	40000800 	.word	0x40000800
 80029e0:	40000c00 	.word	0x40000c00
 80029e4:	40013400 	.word	0x40013400
 80029e8:	40014000 	.word	0x40014000
 80029ec:	00010007 	.word	0x00010007

080029f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b085      	sub	sp, #20
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	4a46      	ldr	r2, [pc, #280]	@ (8002b1c <TIM_Base_SetConfig+0x12c>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d013      	beq.n	8002a30 <TIM_Base_SetConfig+0x40>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a0e:	d00f      	beq.n	8002a30 <TIM_Base_SetConfig+0x40>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	4a43      	ldr	r2, [pc, #268]	@ (8002b20 <TIM_Base_SetConfig+0x130>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d00b      	beq.n	8002a30 <TIM_Base_SetConfig+0x40>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	4a42      	ldr	r2, [pc, #264]	@ (8002b24 <TIM_Base_SetConfig+0x134>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d007      	beq.n	8002a30 <TIM_Base_SetConfig+0x40>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	4a41      	ldr	r2, [pc, #260]	@ (8002b28 <TIM_Base_SetConfig+0x138>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d003      	beq.n	8002a30 <TIM_Base_SetConfig+0x40>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	4a40      	ldr	r2, [pc, #256]	@ (8002b2c <TIM_Base_SetConfig+0x13c>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d108      	bne.n	8002a42 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	68fa      	ldr	r2, [r7, #12]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	4a35      	ldr	r2, [pc, #212]	@ (8002b1c <TIM_Base_SetConfig+0x12c>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d01f      	beq.n	8002a8a <TIM_Base_SetConfig+0x9a>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a50:	d01b      	beq.n	8002a8a <TIM_Base_SetConfig+0x9a>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	4a32      	ldr	r2, [pc, #200]	@ (8002b20 <TIM_Base_SetConfig+0x130>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d017      	beq.n	8002a8a <TIM_Base_SetConfig+0x9a>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	4a31      	ldr	r2, [pc, #196]	@ (8002b24 <TIM_Base_SetConfig+0x134>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d013      	beq.n	8002a8a <TIM_Base_SetConfig+0x9a>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	4a30      	ldr	r2, [pc, #192]	@ (8002b28 <TIM_Base_SetConfig+0x138>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d00f      	beq.n	8002a8a <TIM_Base_SetConfig+0x9a>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	4a2f      	ldr	r2, [pc, #188]	@ (8002b2c <TIM_Base_SetConfig+0x13c>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d00b      	beq.n	8002a8a <TIM_Base_SetConfig+0x9a>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	4a2e      	ldr	r2, [pc, #184]	@ (8002b30 <TIM_Base_SetConfig+0x140>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d007      	beq.n	8002a8a <TIM_Base_SetConfig+0x9a>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	4a2d      	ldr	r2, [pc, #180]	@ (8002b34 <TIM_Base_SetConfig+0x144>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d003      	beq.n	8002a8a <TIM_Base_SetConfig+0x9a>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	4a2c      	ldr	r2, [pc, #176]	@ (8002b38 <TIM_Base_SetConfig+0x148>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d108      	bne.n	8002a9c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	68db      	ldr	r3, [r3, #12]
 8002a96:	68fa      	ldr	r2, [r7, #12]
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	695b      	ldr	r3, [r3, #20]
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	68fa      	ldr	r2, [r7, #12]
 8002aae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	689a      	ldr	r2, [r3, #8]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	4a16      	ldr	r2, [pc, #88]	@ (8002b1c <TIM_Base_SetConfig+0x12c>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d00f      	beq.n	8002ae8 <TIM_Base_SetConfig+0xf8>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	4a18      	ldr	r2, [pc, #96]	@ (8002b2c <TIM_Base_SetConfig+0x13c>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d00b      	beq.n	8002ae8 <TIM_Base_SetConfig+0xf8>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	4a17      	ldr	r2, [pc, #92]	@ (8002b30 <TIM_Base_SetConfig+0x140>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d007      	beq.n	8002ae8 <TIM_Base_SetConfig+0xf8>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	4a16      	ldr	r2, [pc, #88]	@ (8002b34 <TIM_Base_SetConfig+0x144>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d003      	beq.n	8002ae8 <TIM_Base_SetConfig+0xf8>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	4a15      	ldr	r2, [pc, #84]	@ (8002b38 <TIM_Base_SetConfig+0x148>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d103      	bne.n	8002af0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	691a      	ldr	r2, [r3, #16]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2201      	movs	r2, #1
 8002af4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	691b      	ldr	r3, [r3, #16]
 8002afa:	f003 0301 	and.w	r3, r3, #1
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d105      	bne.n	8002b0e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	691b      	ldr	r3, [r3, #16]
 8002b06:	f023 0201 	bic.w	r2, r3, #1
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	611a      	str	r2, [r3, #16]
  }
}
 8002b0e:	bf00      	nop
 8002b10:	3714      	adds	r7, #20
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr
 8002b1a:	bf00      	nop
 8002b1c:	40012c00 	.word	0x40012c00
 8002b20:	40000400 	.word	0x40000400
 8002b24:	40000800 	.word	0x40000800
 8002b28:	40000c00 	.word	0x40000c00
 8002b2c:	40013400 	.word	0x40013400
 8002b30:	40014000 	.word	0x40014000
 8002b34:	40014400 	.word	0x40014400
 8002b38:	40014800 	.word	0x40014800

08002b3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b085      	sub	sp, #20
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
 8002b44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d101      	bne.n	8002b54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b50:	2302      	movs	r3, #2
 8002b52:	e068      	b.n	8002c26 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2201      	movs	r2, #1
 8002b58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2202      	movs	r2, #2
 8002b60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a2e      	ldr	r2, [pc, #184]	@ (8002c34 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d004      	beq.n	8002b88 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a2d      	ldr	r2, [pc, #180]	@ (8002c38 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d108      	bne.n	8002b9a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8002b8e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	68fa      	ldr	r2, [r7, #12]
 8002b96:	4313      	orrs	r3, r2
 8002b98:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ba0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	68fa      	ldr	r2, [r7, #12]
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	68fa      	ldr	r2, [r7, #12]
 8002bb2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a1e      	ldr	r2, [pc, #120]	@ (8002c34 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d01d      	beq.n	8002bfa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bc6:	d018      	beq.n	8002bfa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a1b      	ldr	r2, [pc, #108]	@ (8002c3c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d013      	beq.n	8002bfa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a1a      	ldr	r2, [pc, #104]	@ (8002c40 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d00e      	beq.n	8002bfa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a18      	ldr	r2, [pc, #96]	@ (8002c44 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d009      	beq.n	8002bfa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a13      	ldr	r2, [pc, #76]	@ (8002c38 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d004      	beq.n	8002bfa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a14      	ldr	r2, [pc, #80]	@ (8002c48 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d10c      	bne.n	8002c14 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002c00:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	68ba      	ldr	r2, [r7, #8]
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	68ba      	ldr	r2, [r7, #8]
 8002c12:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2201      	movs	r2, #1
 8002c18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002c24:	2300      	movs	r3, #0
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3714      	adds	r7, #20
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr
 8002c32:	bf00      	nop
 8002c34:	40012c00 	.word	0x40012c00
 8002c38:	40013400 	.word	0x40013400
 8002c3c:	40000400 	.word	0x40000400
 8002c40:	40000800 	.word	0x40000800
 8002c44:	40000c00 	.word	0x40000c00
 8002c48:	40014000 	.word	0x40014000

08002c4c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d101      	bne.n	8002c5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e040      	b.n	8002ce0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d106      	bne.n	8002c74 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f7fd ff04 	bl	8000a7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2224      	movs	r2, #36	@ 0x24
 8002c78:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f022 0201 	bic.w	r2, r2, #1
 8002c88:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d002      	beq.n	8002c98 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f000 fae0 	bl	8003258 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	f000 f825 	bl	8002ce8 <UART_SetConfig>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d101      	bne.n	8002ca8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e01b      	b.n	8002ce0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	685a      	ldr	r2, [r3, #4]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002cb6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	689a      	ldr	r2, [r3, #8]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002cc6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f042 0201 	orr.w	r2, r2, #1
 8002cd6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	f000 fb5f 	bl	800339c <UART_CheckIdleState>
 8002cde:	4603      	mov	r3, r0
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3708      	adds	r7, #8
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}

08002ce8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ce8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cec:	b08a      	sub	sp, #40	@ 0x28
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	689a      	ldr	r2, [r3, #8]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	691b      	ldr	r3, [r3, #16]
 8002d00:	431a      	orrs	r2, r3
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	695b      	ldr	r3, [r3, #20]
 8002d06:	431a      	orrs	r2, r3
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	69db      	ldr	r3, [r3, #28]
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	4ba4      	ldr	r3, [pc, #656]	@ (8002fa8 <UART_SetConfig+0x2c0>)
 8002d18:	4013      	ands	r3, r2
 8002d1a:	68fa      	ldr	r2, [r7, #12]
 8002d1c:	6812      	ldr	r2, [r2, #0]
 8002d1e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002d20:	430b      	orrs	r3, r1
 8002d22:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	68da      	ldr	r2, [r3, #12]
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	430a      	orrs	r2, r1
 8002d38:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	699b      	ldr	r3, [r3, #24]
 8002d3e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a99      	ldr	r2, [pc, #612]	@ (8002fac <UART_SetConfig+0x2c4>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d004      	beq.n	8002d54 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	6a1b      	ldr	r3, [r3, #32]
 8002d4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d50:	4313      	orrs	r3, r2
 8002d52:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d64:	430a      	orrs	r2, r1
 8002d66:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a90      	ldr	r2, [pc, #576]	@ (8002fb0 <UART_SetConfig+0x2c8>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d126      	bne.n	8002dc0 <UART_SetConfig+0xd8>
 8002d72:	4b90      	ldr	r3, [pc, #576]	@ (8002fb4 <UART_SetConfig+0x2cc>)
 8002d74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d78:	f003 0303 	and.w	r3, r3, #3
 8002d7c:	2b03      	cmp	r3, #3
 8002d7e:	d81b      	bhi.n	8002db8 <UART_SetConfig+0xd0>
 8002d80:	a201      	add	r2, pc, #4	@ (adr r2, 8002d88 <UART_SetConfig+0xa0>)
 8002d82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d86:	bf00      	nop
 8002d88:	08002d99 	.word	0x08002d99
 8002d8c:	08002da9 	.word	0x08002da9
 8002d90:	08002da1 	.word	0x08002da1
 8002d94:	08002db1 	.word	0x08002db1
 8002d98:	2301      	movs	r3, #1
 8002d9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002d9e:	e116      	b.n	8002fce <UART_SetConfig+0x2e6>
 8002da0:	2302      	movs	r3, #2
 8002da2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002da6:	e112      	b.n	8002fce <UART_SetConfig+0x2e6>
 8002da8:	2304      	movs	r3, #4
 8002daa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002dae:	e10e      	b.n	8002fce <UART_SetConfig+0x2e6>
 8002db0:	2308      	movs	r3, #8
 8002db2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002db6:	e10a      	b.n	8002fce <UART_SetConfig+0x2e6>
 8002db8:	2310      	movs	r3, #16
 8002dba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002dbe:	e106      	b.n	8002fce <UART_SetConfig+0x2e6>
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a7c      	ldr	r2, [pc, #496]	@ (8002fb8 <UART_SetConfig+0x2d0>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d138      	bne.n	8002e3c <UART_SetConfig+0x154>
 8002dca:	4b7a      	ldr	r3, [pc, #488]	@ (8002fb4 <UART_SetConfig+0x2cc>)
 8002dcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dd0:	f003 030c 	and.w	r3, r3, #12
 8002dd4:	2b0c      	cmp	r3, #12
 8002dd6:	d82d      	bhi.n	8002e34 <UART_SetConfig+0x14c>
 8002dd8:	a201      	add	r2, pc, #4	@ (adr r2, 8002de0 <UART_SetConfig+0xf8>)
 8002dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dde:	bf00      	nop
 8002de0:	08002e15 	.word	0x08002e15
 8002de4:	08002e35 	.word	0x08002e35
 8002de8:	08002e35 	.word	0x08002e35
 8002dec:	08002e35 	.word	0x08002e35
 8002df0:	08002e25 	.word	0x08002e25
 8002df4:	08002e35 	.word	0x08002e35
 8002df8:	08002e35 	.word	0x08002e35
 8002dfc:	08002e35 	.word	0x08002e35
 8002e00:	08002e1d 	.word	0x08002e1d
 8002e04:	08002e35 	.word	0x08002e35
 8002e08:	08002e35 	.word	0x08002e35
 8002e0c:	08002e35 	.word	0x08002e35
 8002e10:	08002e2d 	.word	0x08002e2d
 8002e14:	2300      	movs	r3, #0
 8002e16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e1a:	e0d8      	b.n	8002fce <UART_SetConfig+0x2e6>
 8002e1c:	2302      	movs	r3, #2
 8002e1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e22:	e0d4      	b.n	8002fce <UART_SetConfig+0x2e6>
 8002e24:	2304      	movs	r3, #4
 8002e26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e2a:	e0d0      	b.n	8002fce <UART_SetConfig+0x2e6>
 8002e2c:	2308      	movs	r3, #8
 8002e2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e32:	e0cc      	b.n	8002fce <UART_SetConfig+0x2e6>
 8002e34:	2310      	movs	r3, #16
 8002e36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e3a:	e0c8      	b.n	8002fce <UART_SetConfig+0x2e6>
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a5e      	ldr	r2, [pc, #376]	@ (8002fbc <UART_SetConfig+0x2d4>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d125      	bne.n	8002e92 <UART_SetConfig+0x1aa>
 8002e46:	4b5b      	ldr	r3, [pc, #364]	@ (8002fb4 <UART_SetConfig+0x2cc>)
 8002e48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e4c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002e50:	2b30      	cmp	r3, #48	@ 0x30
 8002e52:	d016      	beq.n	8002e82 <UART_SetConfig+0x19a>
 8002e54:	2b30      	cmp	r3, #48	@ 0x30
 8002e56:	d818      	bhi.n	8002e8a <UART_SetConfig+0x1a2>
 8002e58:	2b20      	cmp	r3, #32
 8002e5a:	d00a      	beq.n	8002e72 <UART_SetConfig+0x18a>
 8002e5c:	2b20      	cmp	r3, #32
 8002e5e:	d814      	bhi.n	8002e8a <UART_SetConfig+0x1a2>
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d002      	beq.n	8002e6a <UART_SetConfig+0x182>
 8002e64:	2b10      	cmp	r3, #16
 8002e66:	d008      	beq.n	8002e7a <UART_SetConfig+0x192>
 8002e68:	e00f      	b.n	8002e8a <UART_SetConfig+0x1a2>
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e70:	e0ad      	b.n	8002fce <UART_SetConfig+0x2e6>
 8002e72:	2302      	movs	r3, #2
 8002e74:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e78:	e0a9      	b.n	8002fce <UART_SetConfig+0x2e6>
 8002e7a:	2304      	movs	r3, #4
 8002e7c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e80:	e0a5      	b.n	8002fce <UART_SetConfig+0x2e6>
 8002e82:	2308      	movs	r3, #8
 8002e84:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e88:	e0a1      	b.n	8002fce <UART_SetConfig+0x2e6>
 8002e8a:	2310      	movs	r3, #16
 8002e8c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e90:	e09d      	b.n	8002fce <UART_SetConfig+0x2e6>
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a4a      	ldr	r2, [pc, #296]	@ (8002fc0 <UART_SetConfig+0x2d8>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d125      	bne.n	8002ee8 <UART_SetConfig+0x200>
 8002e9c:	4b45      	ldr	r3, [pc, #276]	@ (8002fb4 <UART_SetConfig+0x2cc>)
 8002e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ea2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002ea6:	2bc0      	cmp	r3, #192	@ 0xc0
 8002ea8:	d016      	beq.n	8002ed8 <UART_SetConfig+0x1f0>
 8002eaa:	2bc0      	cmp	r3, #192	@ 0xc0
 8002eac:	d818      	bhi.n	8002ee0 <UART_SetConfig+0x1f8>
 8002eae:	2b80      	cmp	r3, #128	@ 0x80
 8002eb0:	d00a      	beq.n	8002ec8 <UART_SetConfig+0x1e0>
 8002eb2:	2b80      	cmp	r3, #128	@ 0x80
 8002eb4:	d814      	bhi.n	8002ee0 <UART_SetConfig+0x1f8>
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d002      	beq.n	8002ec0 <UART_SetConfig+0x1d8>
 8002eba:	2b40      	cmp	r3, #64	@ 0x40
 8002ebc:	d008      	beq.n	8002ed0 <UART_SetConfig+0x1e8>
 8002ebe:	e00f      	b.n	8002ee0 <UART_SetConfig+0x1f8>
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ec6:	e082      	b.n	8002fce <UART_SetConfig+0x2e6>
 8002ec8:	2302      	movs	r3, #2
 8002eca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ece:	e07e      	b.n	8002fce <UART_SetConfig+0x2e6>
 8002ed0:	2304      	movs	r3, #4
 8002ed2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ed6:	e07a      	b.n	8002fce <UART_SetConfig+0x2e6>
 8002ed8:	2308      	movs	r3, #8
 8002eda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ede:	e076      	b.n	8002fce <UART_SetConfig+0x2e6>
 8002ee0:	2310      	movs	r3, #16
 8002ee2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ee6:	e072      	b.n	8002fce <UART_SetConfig+0x2e6>
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a35      	ldr	r2, [pc, #212]	@ (8002fc4 <UART_SetConfig+0x2dc>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d12a      	bne.n	8002f48 <UART_SetConfig+0x260>
 8002ef2:	4b30      	ldr	r3, [pc, #192]	@ (8002fb4 <UART_SetConfig+0x2cc>)
 8002ef4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ef8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002efc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002f00:	d01a      	beq.n	8002f38 <UART_SetConfig+0x250>
 8002f02:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002f06:	d81b      	bhi.n	8002f40 <UART_SetConfig+0x258>
 8002f08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f0c:	d00c      	beq.n	8002f28 <UART_SetConfig+0x240>
 8002f0e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f12:	d815      	bhi.n	8002f40 <UART_SetConfig+0x258>
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d003      	beq.n	8002f20 <UART_SetConfig+0x238>
 8002f18:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f1c:	d008      	beq.n	8002f30 <UART_SetConfig+0x248>
 8002f1e:	e00f      	b.n	8002f40 <UART_SetConfig+0x258>
 8002f20:	2300      	movs	r3, #0
 8002f22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f26:	e052      	b.n	8002fce <UART_SetConfig+0x2e6>
 8002f28:	2302      	movs	r3, #2
 8002f2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f2e:	e04e      	b.n	8002fce <UART_SetConfig+0x2e6>
 8002f30:	2304      	movs	r3, #4
 8002f32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f36:	e04a      	b.n	8002fce <UART_SetConfig+0x2e6>
 8002f38:	2308      	movs	r3, #8
 8002f3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f3e:	e046      	b.n	8002fce <UART_SetConfig+0x2e6>
 8002f40:	2310      	movs	r3, #16
 8002f42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f46:	e042      	b.n	8002fce <UART_SetConfig+0x2e6>
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a17      	ldr	r2, [pc, #92]	@ (8002fac <UART_SetConfig+0x2c4>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d13a      	bne.n	8002fc8 <UART_SetConfig+0x2e0>
 8002f52:	4b18      	ldr	r3, [pc, #96]	@ (8002fb4 <UART_SetConfig+0x2cc>)
 8002f54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f58:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002f5c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002f60:	d01a      	beq.n	8002f98 <UART_SetConfig+0x2b0>
 8002f62:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002f66:	d81b      	bhi.n	8002fa0 <UART_SetConfig+0x2b8>
 8002f68:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002f6c:	d00c      	beq.n	8002f88 <UART_SetConfig+0x2a0>
 8002f6e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002f72:	d815      	bhi.n	8002fa0 <UART_SetConfig+0x2b8>
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d003      	beq.n	8002f80 <UART_SetConfig+0x298>
 8002f78:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f7c:	d008      	beq.n	8002f90 <UART_SetConfig+0x2a8>
 8002f7e:	e00f      	b.n	8002fa0 <UART_SetConfig+0x2b8>
 8002f80:	2300      	movs	r3, #0
 8002f82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f86:	e022      	b.n	8002fce <UART_SetConfig+0x2e6>
 8002f88:	2302      	movs	r3, #2
 8002f8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f8e:	e01e      	b.n	8002fce <UART_SetConfig+0x2e6>
 8002f90:	2304      	movs	r3, #4
 8002f92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f96:	e01a      	b.n	8002fce <UART_SetConfig+0x2e6>
 8002f98:	2308      	movs	r3, #8
 8002f9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f9e:	e016      	b.n	8002fce <UART_SetConfig+0x2e6>
 8002fa0:	2310      	movs	r3, #16
 8002fa2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002fa6:	e012      	b.n	8002fce <UART_SetConfig+0x2e6>
 8002fa8:	efff69f3 	.word	0xefff69f3
 8002fac:	40008000 	.word	0x40008000
 8002fb0:	40013800 	.word	0x40013800
 8002fb4:	40021000 	.word	0x40021000
 8002fb8:	40004400 	.word	0x40004400
 8002fbc:	40004800 	.word	0x40004800
 8002fc0:	40004c00 	.word	0x40004c00
 8002fc4:	40005000 	.word	0x40005000
 8002fc8:	2310      	movs	r3, #16
 8002fca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a9f      	ldr	r2, [pc, #636]	@ (8003250 <UART_SetConfig+0x568>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d17a      	bne.n	80030ce <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002fd8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002fdc:	2b08      	cmp	r3, #8
 8002fde:	d824      	bhi.n	800302a <UART_SetConfig+0x342>
 8002fe0:	a201      	add	r2, pc, #4	@ (adr r2, 8002fe8 <UART_SetConfig+0x300>)
 8002fe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fe6:	bf00      	nop
 8002fe8:	0800300d 	.word	0x0800300d
 8002fec:	0800302b 	.word	0x0800302b
 8002ff0:	08003015 	.word	0x08003015
 8002ff4:	0800302b 	.word	0x0800302b
 8002ff8:	0800301b 	.word	0x0800301b
 8002ffc:	0800302b 	.word	0x0800302b
 8003000:	0800302b 	.word	0x0800302b
 8003004:	0800302b 	.word	0x0800302b
 8003008:	08003023 	.word	0x08003023
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800300c:	f7fe fed8 	bl	8001dc0 <HAL_RCC_GetPCLK1Freq>
 8003010:	61f8      	str	r0, [r7, #28]
        break;
 8003012:	e010      	b.n	8003036 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003014:	4b8f      	ldr	r3, [pc, #572]	@ (8003254 <UART_SetConfig+0x56c>)
 8003016:	61fb      	str	r3, [r7, #28]
        break;
 8003018:	e00d      	b.n	8003036 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800301a:	f7fe fe39 	bl	8001c90 <HAL_RCC_GetSysClockFreq>
 800301e:	61f8      	str	r0, [r7, #28]
        break;
 8003020:	e009      	b.n	8003036 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003022:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003026:	61fb      	str	r3, [r7, #28]
        break;
 8003028:	e005      	b.n	8003036 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800302a:	2300      	movs	r3, #0
 800302c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003034:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	2b00      	cmp	r3, #0
 800303a:	f000 80fb 	beq.w	8003234 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	685a      	ldr	r2, [r3, #4]
 8003042:	4613      	mov	r3, r2
 8003044:	005b      	lsls	r3, r3, #1
 8003046:	4413      	add	r3, r2
 8003048:	69fa      	ldr	r2, [r7, #28]
 800304a:	429a      	cmp	r2, r3
 800304c:	d305      	bcc.n	800305a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003054:	69fa      	ldr	r2, [r7, #28]
 8003056:	429a      	cmp	r2, r3
 8003058:	d903      	bls.n	8003062 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003060:	e0e8      	b.n	8003234 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	2200      	movs	r2, #0
 8003066:	461c      	mov	r4, r3
 8003068:	4615      	mov	r5, r2
 800306a:	f04f 0200 	mov.w	r2, #0
 800306e:	f04f 0300 	mov.w	r3, #0
 8003072:	022b      	lsls	r3, r5, #8
 8003074:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003078:	0222      	lsls	r2, r4, #8
 800307a:	68f9      	ldr	r1, [r7, #12]
 800307c:	6849      	ldr	r1, [r1, #4]
 800307e:	0849      	lsrs	r1, r1, #1
 8003080:	2000      	movs	r0, #0
 8003082:	4688      	mov	r8, r1
 8003084:	4681      	mov	r9, r0
 8003086:	eb12 0a08 	adds.w	sl, r2, r8
 800308a:	eb43 0b09 	adc.w	fp, r3, r9
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	2200      	movs	r2, #0
 8003094:	603b      	str	r3, [r7, #0]
 8003096:	607a      	str	r2, [r7, #4]
 8003098:	e9d7 2300 	ldrd	r2, r3, [r7]
 800309c:	4650      	mov	r0, sl
 800309e:	4659      	mov	r1, fp
 80030a0:	f7fd f892 	bl	80001c8 <__aeabi_uldivmod>
 80030a4:	4602      	mov	r2, r0
 80030a6:	460b      	mov	r3, r1
 80030a8:	4613      	mov	r3, r2
 80030aa:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80030ac:	69bb      	ldr	r3, [r7, #24]
 80030ae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80030b2:	d308      	bcc.n	80030c6 <UART_SetConfig+0x3de>
 80030b4:	69bb      	ldr	r3, [r7, #24]
 80030b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80030ba:	d204      	bcs.n	80030c6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	69ba      	ldr	r2, [r7, #24]
 80030c2:	60da      	str	r2, [r3, #12]
 80030c4:	e0b6      	b.n	8003234 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80030cc:	e0b2      	b.n	8003234 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	69db      	ldr	r3, [r3, #28]
 80030d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80030d6:	d15e      	bne.n	8003196 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80030d8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80030dc:	2b08      	cmp	r3, #8
 80030de:	d828      	bhi.n	8003132 <UART_SetConfig+0x44a>
 80030e0:	a201      	add	r2, pc, #4	@ (adr r2, 80030e8 <UART_SetConfig+0x400>)
 80030e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030e6:	bf00      	nop
 80030e8:	0800310d 	.word	0x0800310d
 80030ec:	08003115 	.word	0x08003115
 80030f0:	0800311d 	.word	0x0800311d
 80030f4:	08003133 	.word	0x08003133
 80030f8:	08003123 	.word	0x08003123
 80030fc:	08003133 	.word	0x08003133
 8003100:	08003133 	.word	0x08003133
 8003104:	08003133 	.word	0x08003133
 8003108:	0800312b 	.word	0x0800312b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800310c:	f7fe fe58 	bl	8001dc0 <HAL_RCC_GetPCLK1Freq>
 8003110:	61f8      	str	r0, [r7, #28]
        break;
 8003112:	e014      	b.n	800313e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003114:	f7fe fe6a 	bl	8001dec <HAL_RCC_GetPCLK2Freq>
 8003118:	61f8      	str	r0, [r7, #28]
        break;
 800311a:	e010      	b.n	800313e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800311c:	4b4d      	ldr	r3, [pc, #308]	@ (8003254 <UART_SetConfig+0x56c>)
 800311e:	61fb      	str	r3, [r7, #28]
        break;
 8003120:	e00d      	b.n	800313e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003122:	f7fe fdb5 	bl	8001c90 <HAL_RCC_GetSysClockFreq>
 8003126:	61f8      	str	r0, [r7, #28]
        break;
 8003128:	e009      	b.n	800313e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800312a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800312e:	61fb      	str	r3, [r7, #28]
        break;
 8003130:	e005      	b.n	800313e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003132:	2300      	movs	r3, #0
 8003134:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800313c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d077      	beq.n	8003234 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003144:	69fb      	ldr	r3, [r7, #28]
 8003146:	005a      	lsls	r2, r3, #1
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	085b      	lsrs	r3, r3, #1
 800314e:	441a      	add	r2, r3
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	fbb2 f3f3 	udiv	r3, r2, r3
 8003158:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800315a:	69bb      	ldr	r3, [r7, #24]
 800315c:	2b0f      	cmp	r3, #15
 800315e:	d916      	bls.n	800318e <UART_SetConfig+0x4a6>
 8003160:	69bb      	ldr	r3, [r7, #24]
 8003162:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003166:	d212      	bcs.n	800318e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003168:	69bb      	ldr	r3, [r7, #24]
 800316a:	b29b      	uxth	r3, r3
 800316c:	f023 030f 	bic.w	r3, r3, #15
 8003170:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003172:	69bb      	ldr	r3, [r7, #24]
 8003174:	085b      	lsrs	r3, r3, #1
 8003176:	b29b      	uxth	r3, r3
 8003178:	f003 0307 	and.w	r3, r3, #7
 800317c:	b29a      	uxth	r2, r3
 800317e:	8afb      	ldrh	r3, [r7, #22]
 8003180:	4313      	orrs	r3, r2
 8003182:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	8afa      	ldrh	r2, [r7, #22]
 800318a:	60da      	str	r2, [r3, #12]
 800318c:	e052      	b.n	8003234 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003194:	e04e      	b.n	8003234 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003196:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800319a:	2b08      	cmp	r3, #8
 800319c:	d827      	bhi.n	80031ee <UART_SetConfig+0x506>
 800319e:	a201      	add	r2, pc, #4	@ (adr r2, 80031a4 <UART_SetConfig+0x4bc>)
 80031a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031a4:	080031c9 	.word	0x080031c9
 80031a8:	080031d1 	.word	0x080031d1
 80031ac:	080031d9 	.word	0x080031d9
 80031b0:	080031ef 	.word	0x080031ef
 80031b4:	080031df 	.word	0x080031df
 80031b8:	080031ef 	.word	0x080031ef
 80031bc:	080031ef 	.word	0x080031ef
 80031c0:	080031ef 	.word	0x080031ef
 80031c4:	080031e7 	.word	0x080031e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031c8:	f7fe fdfa 	bl	8001dc0 <HAL_RCC_GetPCLK1Freq>
 80031cc:	61f8      	str	r0, [r7, #28]
        break;
 80031ce:	e014      	b.n	80031fa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80031d0:	f7fe fe0c 	bl	8001dec <HAL_RCC_GetPCLK2Freq>
 80031d4:	61f8      	str	r0, [r7, #28]
        break;
 80031d6:	e010      	b.n	80031fa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031d8:	4b1e      	ldr	r3, [pc, #120]	@ (8003254 <UART_SetConfig+0x56c>)
 80031da:	61fb      	str	r3, [r7, #28]
        break;
 80031dc:	e00d      	b.n	80031fa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031de:	f7fe fd57 	bl	8001c90 <HAL_RCC_GetSysClockFreq>
 80031e2:	61f8      	str	r0, [r7, #28]
        break;
 80031e4:	e009      	b.n	80031fa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80031ea:	61fb      	str	r3, [r7, #28]
        break;
 80031ec:	e005      	b.n	80031fa <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80031ee:	2300      	movs	r3, #0
 80031f0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80031f8:	bf00      	nop
    }

    if (pclk != 0U)
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d019      	beq.n	8003234 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	085a      	lsrs	r2, r3, #1
 8003206:	69fb      	ldr	r3, [r7, #28]
 8003208:	441a      	add	r2, r3
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003212:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003214:	69bb      	ldr	r3, [r7, #24]
 8003216:	2b0f      	cmp	r3, #15
 8003218:	d909      	bls.n	800322e <UART_SetConfig+0x546>
 800321a:	69bb      	ldr	r3, [r7, #24]
 800321c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003220:	d205      	bcs.n	800322e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003222:	69bb      	ldr	r3, [r7, #24]
 8003224:	b29a      	uxth	r2, r3
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	60da      	str	r2, [r3, #12]
 800322c:	e002      	b.n	8003234 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2200      	movs	r2, #0
 8003238:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2200      	movs	r2, #0
 800323e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003240:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8003244:	4618      	mov	r0, r3
 8003246:	3728      	adds	r7, #40	@ 0x28
 8003248:	46bd      	mov	sp, r7
 800324a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800324e:	bf00      	nop
 8003250:	40008000 	.word	0x40008000
 8003254:	00f42400 	.word	0x00f42400

08003258 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003258:	b480      	push	{r7}
 800325a:	b083      	sub	sp, #12
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003264:	f003 0308 	and.w	r3, r3, #8
 8003268:	2b00      	cmp	r3, #0
 800326a:	d00a      	beq.n	8003282 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	430a      	orrs	r2, r1
 8003280:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003286:	f003 0301 	and.w	r3, r3, #1
 800328a:	2b00      	cmp	r3, #0
 800328c:	d00a      	beq.n	80032a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	430a      	orrs	r2, r1
 80032a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032a8:	f003 0302 	and.w	r3, r3, #2
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d00a      	beq.n	80032c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	430a      	orrs	r2, r1
 80032c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ca:	f003 0304 	and.w	r3, r3, #4
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d00a      	beq.n	80032e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	430a      	orrs	r2, r1
 80032e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ec:	f003 0310 	and.w	r3, r3, #16
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d00a      	beq.n	800330a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	430a      	orrs	r2, r1
 8003308:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800330e:	f003 0320 	and.w	r3, r3, #32
 8003312:	2b00      	cmp	r3, #0
 8003314:	d00a      	beq.n	800332c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	430a      	orrs	r2, r1
 800332a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003330:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003334:	2b00      	cmp	r3, #0
 8003336:	d01a      	beq.n	800336e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	430a      	orrs	r2, r1
 800334c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003352:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003356:	d10a      	bne.n	800336e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	430a      	orrs	r2, r1
 800336c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003372:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003376:	2b00      	cmp	r3, #0
 8003378:	d00a      	beq.n	8003390 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	430a      	orrs	r2, r1
 800338e:	605a      	str	r2, [r3, #4]
  }
}
 8003390:	bf00      	nop
 8003392:	370c      	adds	r7, #12
 8003394:	46bd      	mov	sp, r7
 8003396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339a:	4770      	bx	lr

0800339c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b098      	sub	sp, #96	@ 0x60
 80033a0:	af02      	add	r7, sp, #8
 80033a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2200      	movs	r2, #0
 80033a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80033ac:	f7fd fc54 	bl	8000c58 <HAL_GetTick>
 80033b0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f003 0308 	and.w	r3, r3, #8
 80033bc:	2b08      	cmp	r3, #8
 80033be:	d12e      	bne.n	800341e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80033c0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80033c4:	9300      	str	r3, [sp, #0]
 80033c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033c8:	2200      	movs	r2, #0
 80033ca:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f000 f88c 	bl	80034ec <UART_WaitOnFlagUntilTimeout>
 80033d4:	4603      	mov	r3, r0
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d021      	beq.n	800341e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033e2:	e853 3f00 	ldrex	r3, [r3]
 80033e6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80033e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80033ee:	653b      	str	r3, [r7, #80]	@ 0x50
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	461a      	mov	r2, r3
 80033f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80033f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80033fa:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033fc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80033fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003400:	e841 2300 	strex	r3, r2, [r1]
 8003404:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003406:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003408:	2b00      	cmp	r3, #0
 800340a:	d1e6      	bne.n	80033da <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2220      	movs	r2, #32
 8003410:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2200      	movs	r2, #0
 8003416:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	e062      	b.n	80034e4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 0304 	and.w	r3, r3, #4
 8003428:	2b04      	cmp	r3, #4
 800342a:	d149      	bne.n	80034c0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800342c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003430:	9300      	str	r3, [sp, #0]
 8003432:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003434:	2200      	movs	r2, #0
 8003436:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f000 f856 	bl	80034ec <UART_WaitOnFlagUntilTimeout>
 8003440:	4603      	mov	r3, r0
 8003442:	2b00      	cmp	r3, #0
 8003444:	d03c      	beq.n	80034c0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800344c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800344e:	e853 3f00 	ldrex	r3, [r3]
 8003452:	623b      	str	r3, [r7, #32]
   return(result);
 8003454:	6a3b      	ldr	r3, [r7, #32]
 8003456:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800345a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	461a      	mov	r2, r3
 8003462:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003464:	633b      	str	r3, [r7, #48]	@ 0x30
 8003466:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003468:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800346a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800346c:	e841 2300 	strex	r3, r2, [r1]
 8003470:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003472:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003474:	2b00      	cmp	r3, #0
 8003476:	d1e6      	bne.n	8003446 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	3308      	adds	r3, #8
 800347e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	e853 3f00 	ldrex	r3, [r3]
 8003486:	60fb      	str	r3, [r7, #12]
   return(result);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f023 0301 	bic.w	r3, r3, #1
 800348e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	3308      	adds	r3, #8
 8003496:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003498:	61fa      	str	r2, [r7, #28]
 800349a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800349c:	69b9      	ldr	r1, [r7, #24]
 800349e:	69fa      	ldr	r2, [r7, #28]
 80034a0:	e841 2300 	strex	r3, r2, [r1]
 80034a4:	617b      	str	r3, [r7, #20]
   return(result);
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d1e5      	bne.n	8003478 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2220      	movs	r2, #32
 80034b0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2200      	movs	r2, #0
 80034b8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034bc:	2303      	movs	r3, #3
 80034be:	e011      	b.n	80034e4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2220      	movs	r2, #32
 80034c4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2220      	movs	r2, #32
 80034ca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2200      	movs	r2, #0
 80034d8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2200      	movs	r2, #0
 80034de:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80034e2:	2300      	movs	r3, #0
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	3758      	adds	r7, #88	@ 0x58
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}

080034ec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b084      	sub	sp, #16
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	60f8      	str	r0, [r7, #12]
 80034f4:	60b9      	str	r1, [r7, #8]
 80034f6:	603b      	str	r3, [r7, #0]
 80034f8:	4613      	mov	r3, r2
 80034fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034fc:	e04f      	b.n	800359e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034fe:	69bb      	ldr	r3, [r7, #24]
 8003500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003504:	d04b      	beq.n	800359e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003506:	f7fd fba7 	bl	8000c58 <HAL_GetTick>
 800350a:	4602      	mov	r2, r0
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	1ad3      	subs	r3, r2, r3
 8003510:	69ba      	ldr	r2, [r7, #24]
 8003512:	429a      	cmp	r2, r3
 8003514:	d302      	bcc.n	800351c <UART_WaitOnFlagUntilTimeout+0x30>
 8003516:	69bb      	ldr	r3, [r7, #24]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d101      	bne.n	8003520 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800351c:	2303      	movs	r3, #3
 800351e:	e04e      	b.n	80035be <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0304 	and.w	r3, r3, #4
 800352a:	2b00      	cmp	r3, #0
 800352c:	d037      	beq.n	800359e <UART_WaitOnFlagUntilTimeout+0xb2>
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	2b80      	cmp	r3, #128	@ 0x80
 8003532:	d034      	beq.n	800359e <UART_WaitOnFlagUntilTimeout+0xb2>
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	2b40      	cmp	r3, #64	@ 0x40
 8003538:	d031      	beq.n	800359e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	69db      	ldr	r3, [r3, #28]
 8003540:	f003 0308 	and.w	r3, r3, #8
 8003544:	2b08      	cmp	r3, #8
 8003546:	d110      	bne.n	800356a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	2208      	movs	r2, #8
 800354e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003550:	68f8      	ldr	r0, [r7, #12]
 8003552:	f000 f838 	bl	80035c6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2208      	movs	r2, #8
 800355a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2200      	movs	r2, #0
 8003562:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e029      	b.n	80035be <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	69db      	ldr	r3, [r3, #28]
 8003570:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003574:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003578:	d111      	bne.n	800359e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003582:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003584:	68f8      	ldr	r0, [r7, #12]
 8003586:	f000 f81e 	bl	80035c6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2220      	movs	r2, #32
 800358e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2200      	movs	r2, #0
 8003596:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800359a:	2303      	movs	r3, #3
 800359c:	e00f      	b.n	80035be <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	69da      	ldr	r2, [r3, #28]
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	4013      	ands	r3, r2
 80035a8:	68ba      	ldr	r2, [r7, #8]
 80035aa:	429a      	cmp	r2, r3
 80035ac:	bf0c      	ite	eq
 80035ae:	2301      	moveq	r3, #1
 80035b0:	2300      	movne	r3, #0
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	461a      	mov	r2, r3
 80035b6:	79fb      	ldrb	r3, [r7, #7]
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d0a0      	beq.n	80034fe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80035bc:	2300      	movs	r3, #0
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3710      	adds	r7, #16
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}

080035c6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80035c6:	b480      	push	{r7}
 80035c8:	b095      	sub	sp, #84	@ 0x54
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035d6:	e853 3f00 	ldrex	r3, [r3]
 80035da:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80035dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035de:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80035e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	461a      	mov	r2, r3
 80035ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80035ec:	643b      	str	r3, [r7, #64]	@ 0x40
 80035ee:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035f0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80035f2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80035f4:	e841 2300 	strex	r3, r2, [r1]
 80035f8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80035fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d1e6      	bne.n	80035ce <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	3308      	adds	r3, #8
 8003606:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003608:	6a3b      	ldr	r3, [r7, #32]
 800360a:	e853 3f00 	ldrex	r3, [r3]
 800360e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	f023 0301 	bic.w	r3, r3, #1
 8003616:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	3308      	adds	r3, #8
 800361e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003620:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003622:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003624:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003626:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003628:	e841 2300 	strex	r3, r2, [r1]
 800362c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800362e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003630:	2b00      	cmp	r3, #0
 8003632:	d1e5      	bne.n	8003600 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003638:	2b01      	cmp	r3, #1
 800363a:	d118      	bne.n	800366e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	e853 3f00 	ldrex	r3, [r3]
 8003648:	60bb      	str	r3, [r7, #8]
   return(result);
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	f023 0310 	bic.w	r3, r3, #16
 8003650:	647b      	str	r3, [r7, #68]	@ 0x44
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	461a      	mov	r2, r3
 8003658:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800365a:	61bb      	str	r3, [r7, #24]
 800365c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800365e:	6979      	ldr	r1, [r7, #20]
 8003660:	69ba      	ldr	r2, [r7, #24]
 8003662:	e841 2300 	strex	r3, r2, [r1]
 8003666:	613b      	str	r3, [r7, #16]
   return(result);
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d1e6      	bne.n	800363c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2220      	movs	r2, #32
 8003672:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2200      	movs	r2, #0
 800367a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2200      	movs	r2, #0
 8003680:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003682:	bf00      	nop
 8003684:	3754      	adds	r7, #84	@ 0x54
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr

0800368e <memset>:
 800368e:	4402      	add	r2, r0
 8003690:	4603      	mov	r3, r0
 8003692:	4293      	cmp	r3, r2
 8003694:	d100      	bne.n	8003698 <memset+0xa>
 8003696:	4770      	bx	lr
 8003698:	f803 1b01 	strb.w	r1, [r3], #1
 800369c:	e7f9      	b.n	8003692 <memset+0x4>
	...

080036a0 <__libc_init_array>:
 80036a0:	b570      	push	{r4, r5, r6, lr}
 80036a2:	4d0d      	ldr	r5, [pc, #52]	@ (80036d8 <__libc_init_array+0x38>)
 80036a4:	4c0d      	ldr	r4, [pc, #52]	@ (80036dc <__libc_init_array+0x3c>)
 80036a6:	1b64      	subs	r4, r4, r5
 80036a8:	10a4      	asrs	r4, r4, #2
 80036aa:	2600      	movs	r6, #0
 80036ac:	42a6      	cmp	r6, r4
 80036ae:	d109      	bne.n	80036c4 <__libc_init_array+0x24>
 80036b0:	4d0b      	ldr	r5, [pc, #44]	@ (80036e0 <__libc_init_array+0x40>)
 80036b2:	4c0c      	ldr	r4, [pc, #48]	@ (80036e4 <__libc_init_array+0x44>)
 80036b4:	f000 f818 	bl	80036e8 <_init>
 80036b8:	1b64      	subs	r4, r4, r5
 80036ba:	10a4      	asrs	r4, r4, #2
 80036bc:	2600      	movs	r6, #0
 80036be:	42a6      	cmp	r6, r4
 80036c0:	d105      	bne.n	80036ce <__libc_init_array+0x2e>
 80036c2:	bd70      	pop	{r4, r5, r6, pc}
 80036c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80036c8:	4798      	blx	r3
 80036ca:	3601      	adds	r6, #1
 80036cc:	e7ee      	b.n	80036ac <__libc_init_array+0xc>
 80036ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80036d2:	4798      	blx	r3
 80036d4:	3601      	adds	r6, #1
 80036d6:	e7f2      	b.n	80036be <__libc_init_array+0x1e>
 80036d8:	08003750 	.word	0x08003750
 80036dc:	08003750 	.word	0x08003750
 80036e0:	08003750 	.word	0x08003750
 80036e4:	08003754 	.word	0x08003754

080036e8 <_init>:
 80036e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036ea:	bf00      	nop
 80036ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036ee:	bc08      	pop	{r3}
 80036f0:	469e      	mov	lr, r3
 80036f2:	4770      	bx	lr

080036f4 <_fini>:
 80036f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036f6:	bf00      	nop
 80036f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036fa:	bc08      	pop	{r3}
 80036fc:	469e      	mov	lr, r3
 80036fe:	4770      	bx	lr
